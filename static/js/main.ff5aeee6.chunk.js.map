{"version":3,"sources":["logo/logo.svg","screens/Entry.tsx","context/DigitalArtContext.tsx","components/ScrollableContainer.tsx","components/NFTCardsContainer.tsx","styles/cards.ts","components/ArtistOwnerInfoBox.tsx","components/BackdropProgress.tsx","hooks/useBooleanCondition.ts","screens/Market.tsx","context/ThemeContextType.tsx","components/SidebarMenu.tsx","screens/Artworks.tsx","screens/MintNFT.tsx","screens/MarketableNFT.tsx","utils/webDetection.ts","screens/Collection.tsx","screens/PurchasedNFT.tsx","screens/Licenses.tsx","App.tsx","hooks/useThemeContext.ts","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx","utils/smartContract.ts","utils/listeners.ts","hooks/useDigitalArt.ts"],"names":["useStyles","makeStyles","theme","createStyles","container","display","alignItems","justifyContent","flexDirection","paddingBottom","spacing","flex","height","logo","pointerEvents","marginBottom","appName","padding","textAlign","button","marginTop","width","border","EntryPage","props","classes","Container","className","maxWidth","src","alt","Typography","variant","Button","onClick","connect","React","createContext","box","overflowY","ScrollableContainer","children","Box","title","emptyListBox","emptyListText","color","palette","text","hint","cardsBox","flexWrap","flexShrink","card","margin","breakpoints","down","NFTCardsContainer","fab","pageTitle","errorMessage","filteredNFTs","component","length","Grid","direction","justify","cardContent","cardImage","cardText","ownershipBox","ownerArtistBox","ownershipText","fontSize","avatar","backgroundColor","ArtistOwnerInfoBox","artist","owner","gutterBottom","Avatar","href","target","string","size","backdrop","zIndex","drawer","BackdropProgress","open","onClose","Backdrop","CircularProgress","useBooleanCondition","start","useState","_status","setStatus","toggleOn","toggleOff","position","right","bottom","MarketPage","cardsStyles","cardStyles","history","useHistory","_progress","startProgress","stopProgress","_nfts","useContext","ProviderContext","useEffect","filter","nft","sellingPrice","dailyLicensePrice","Fab","push","sort","a","b","id","map","i","Card","CardActionArea","CardMedia","metadata","image","CardContent","style","Number","formatUnits","toString","Divider","list","currentUser","link","textDecoration","divider","marginLeft","Sidebar","_signerAddress","Drawer","anchor","role","substr","List","to","ListItem","ListItemIcon","ListItemText","primary","expand","transform","transition","transitions","create","duration","shortest","expandOpen","background","paper","inline","expandedContent","ArtworksPage","Map","_tokenPurchases","setTokenPurchases","_licensePurchases","setLicensePurchases","_expanded","setExpanded","unsetExpanded","providerContext","getTokenPurchasedEventsForNFT","getLicensePurchasedEventsForNFT","getPurchases","tokenPurchases","licensePurchases","set","get","reduce","acc","event","price","IconButton","clsx","aria-expanded","aria-label","disabled","Collapse","in","timeout","unmountOnExit","timestamp","purchasedEvent","ListItemAvatar","sender","newOwner","minWidth","txHash","secondary","durationInDays","Date","toLocaleString","tokenId","wordWrap","textDecorationColor","uploadButton","input","imagePreviewContainer","authContent","checkboxes","MintNFTPage","_title","setTitle","_description","setDescription","_creator","setCreator","_year","setYear","_sellingPrice","setSellingPrice","_dailyLicensePrice","setDailyLicensePrice","_uploadedImagePreview","setUploadedImagePreview","_uploadedImageIpfs","setUploadedImageIpfs","first","second","third","_checked","setChecked","mintNFT","onCheck","name","checked","issueToken","sellingPriceInWei","parseUnits","dailyLicensePriceInWei","description","creator","year","replace","startIcon","accept","type","onChange","e","preventDefault","file","files","URL","createObjectURL","reader","window","FileReader","readAsArrayBuffer","onloadend","result","hidden","TextField","value","label","placeholder","FormControlLabel","control","Checkbox","purchaseTitle","formGroup","formControl","formControlLabel","labelBox","MarketableNFTPage","_nft","setNft","_buyRadio","checkBuyRadio","uncheckBuyRadio","_licenseRadio","checkLicenseRadio","uncheckLicenseRadio","_days","setDays","_hasValidLicense","setHasValidLicense","useParams","buyNFT","buyLicense","find","licensesForNFT","filteredLicenses","licenseEvent","license","endDateInMillis","getTime","getLicenses","handleBuy","txValue","BigNumber","from","bgDays","bgDailyLicensePrice","days","mul","FormControl","RadioGroup","defaultValue","Radio","Slider","step","min","max","newValue","valueLabelDisplay","aria-labelledby","webDetect","ipfsCID","axios","post","response","status","data","console","error","iprBox","iprReportText","icon","imageLinkIcon","main","sourceLocation","CollectionPage","_infringmentAttempts","setInfringmentAttempts","_lastDetectedTimestamps","setLastDetectedTimestamps","_lastDetectedTotalAttempts","setLastDetectedTotalAttempts","_expandableButtons","setExpandableButtons","getInfringmentAttemptsRecordedEventForNFT","recordIPRInfringementAttempts","detectIPRInfringmentAttempts","attempts","timestamps","totalAttempts","expandableButtons","pagesWithMatchingImages","infringmentAttemptsHash","crypto","createHash","update","JSON","stringify","digest","infringmentAttemptsForNFT","lastAttempts","now","handleWebDetection","getInfringmentsAttemptsFromBlockchain","handleExpandableButtonClick","expBtn","marginRight","infringmentAttempt","fullMatchingImages","url","partialMatchingImages","split","priceContainerBox","priceTitle","ownershipContentBox","PurchasedNFTPage","_newSellingPrice","setNewSellingPrice","_newDailyLicensePrice","setNewDailyLicensePrice","_buyPriceRadio","checkBuyPriceRadio","uncheckBuyPriceRadio","_licensePriceRadio","checkLicensePriceRadio","uncheckLicensePriceRadio","updateSellingPrice","updateDailyLicensePrice","handlePriceUpdate","newSellingPrice","newDailyLicensePrice","valid","invalid","LicensesPage","getLicensePurchases","minHeight","leftAppBarButton","flexGrow","App","undefined","_digitalArt","setDigitalArt","_sidebar","openSidebar","closeSidebar","location","useLocation","themeContext","themeType","localStorage","getItem","_themeType","setThemeType","_theme","useMemo","createMuiTheme","toggleTheme","newThemeType","setItem","useThemeContext","useProviderContext","signer","connectYourWallet","injectedProvider","provider","request","method","listAccounts","getSigner","configureConnection","ethers","providers","Web3Provider","getNetwork","currentNetwork","chainId","marketplaceSigner","Wallet","process","contract","Contract","abi","ipfs","IPFS","host","port","protocol","detectEthereumProvider","ethereumInjectedProvider","isMetaMask","Error","connectToBlockchain","on","accounts","_address","reload","ThemeContextType","Provider","ThemeProvider","Paper","elevation","square","DigitalArtContext","AppBar","Toolbar","pathname","edge","numberRegex","test","includes","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration","retrieveNfts","filters","TokenMinted","queryFilter","tokenMintedEvents","nfts","last","eventArgs","args","idToNFT","tokenData","tokenURI","json","uri","retrieveTokenPurchasedEvent","TokenPurchased","tokenPurchasedEvents","purchases","purchase","transactionHash","retrieveLicensePurchasedEvent","LicensePurchased","licensePurchasedEvents","retrieveInfringmentAttemptsRecordedEvent","InfringmentAttemptsRecorded","infringmentAttemptsRecordedEvents","infringmentAttempts","onNFTMinted","listener","getNFT","off","bind","onNFTPurchased","getPurchasedTokenId","oldOwner","onSellingPriceUpdated","getNewSellingPrice","oldSellingPrice","onDailyLicensePriceUpdated","getNewDailyLicensePrice","oldDailyLicensePrice","useDigitalArtContext","digitalArt","setSignerAddress","setNfts","add","Buffer","imageCID","doc","hash","metadataCID","safeMint","tx","wait","purchaseNFT","purchaseLicense","nftPurchases","licensesPurchases","attempt"],"mappings":"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","file":"static/js/main.ff5aeee6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.d54e03e3.svg\";","import React from \"react\"\nimport { Theme, Container, Button, Typography } from \"@material-ui/core\"\nimport createStyles from \"@material-ui/core/styles/createStyles\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport logo from \"../logo/logo.svg\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      paddingBottom: theme.spacing(8),\n      flex: 1,\n      height: \"100vh\"\n    },\n    logo: {\n      height: \"200px\",\n      pointerEvents: \"none\",\n      marginBottom: theme.spacing(2)\n    },\n    appName: {\n      padding: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      textAlign: \"center\"\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      width: \"300px\",\n      border: \"1.5px solid\"\n    }\n  })\n)\n\n// Asks and handles the request for the connection of the MetaMask wallet.\nexport default function EntryPage(props: any) {\n  const classes = useStyles()\n\n  return (\n    <Container className={classes.container} maxWidth=\"md\">\n      <img className={classes.logo} src={logo} alt=\"logo\" />\n      <Typography className={classes.appName} variant=\"h6\">\n        <b>NFT Marketplace with Royalty Redistribution & IPR Management </b>\n      </Typography>\n      <Button\n        className={classes.button}\n        onClick={props.connect}\n        variant=\"outlined\"\n      >\n        Connect Your Wallet\n      </Button>\n    </Container>\n  )\n}\n","import React from \"react\"\nimport {\n  SafeMintTxInputData,\n  NFT,\n  BuyNFTInputData,\n  BuyLicenseInputData,\n  UpdateDailyLicensePriceInputData,\n  UpdateSellingPriceInputData,\n  RecordIPRInfringmentAttemptsInputData\n} from \"../types/Blockchain\"\n\n// Type for the context object for Digital Art core business logic.\nexport type DigitalArtContextType = {\n  _signerAddress: string\n  _nfts: Array<NFT>\n  mintNFT: (data: SafeMintTxInputData) => Promise<any>\n  buyNFT: (data: BuyNFTInputData) => Promise<any>\n  buyLicense: (data: BuyLicenseInputData) => Promise<any>\n  updateSellingPrice: (data: UpdateSellingPriceInputData) => Promise<any>\n  updateDailyLicensePrice: (\n    data: UpdateDailyLicensePriceInputData\n  ) => Promise<any>\n  recordIPRInfringementAttempts: (\n    data: RecordIPRInfringmentAttemptsInputData\n  ) => Promise<any>\n  getTokenPurchasedEventsForNFT: (tokenId: number) => Promise<any>\n  getLicensePurchasedEventsForNFT: (tokenId: number) => Promise<any>\n  getInfringmentAttemptsRecordedEventForNFT: (tokenId: number) => Promise<any>\n}\n\nexport default React.createContext<DigitalArtContextType | null>(null)\n","import { Box, Container, createStyles, makeStyles } from \"@material-ui/core\"\nimport { ReactNode } from \"react\"\n\nexport interface ScrollableContainerProps {\n  children?: ReactNode\n  className?: string\n  maxWidth?: \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | false\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    box: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      overflowY: \"auto\",\n      height: \"90vh\",\n      width: \"100vw\"\n    },\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      flex: 1\n    }\n  })\n)\n\n// Custom reusable scrollable container adaptable for both mobile and desktop devices.\nexport default function ScrollableContainer({\n  children,\n  className,\n  maxWidth\n}: ScrollableContainerProps) {\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.box}>\n      <Container\n        className={classes.container + \" \" + className}\n        maxWidth={maxWidth || \"sm\"}\n      >\n        {children || false}\n      </Container>\n    </Box>\n  )\n}\n","import React, { ReactNode } from \"react\"\nimport ScrollableContainer from \"../components/ScrollableContainer\"\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  Box,\n  Typography,\n  Grid\n} from \"@material-ui/core\"\nimport { NFT } from \"../types/Blockchain\"\n\n// Custom props type.\nexport interface NFTCardsContainerProps {\n  children?: ReactNode\n  fab?: ReactNode\n  pageTitle: string\n  errorMessage: string\n  filteredNFTs: Array<NFT>\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    title: {\n      textAlign: \"center\"\n    },\n    emptyListBox: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      paddingBottom: theme.spacing(8)\n    },\n    emptyListText: {\n      color: theme.palette.text.hint\n    },\n    cardsBox: {\n      display: \"flex\",\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      flexWrap: \"wrap\",\n      flexShrink: 1\n    },\n    card: {\n      margin: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      border: \"1px solid black\",\n      width: \"33vw\",\n      [theme.breakpoints.down(\"sm\")]: {\n        width: \"86vw\"\n      }\n    }\n  })\n)\n\n// Handles the display of a custom card component based on the provided NFT list.\nexport default function NFTCardsContainer({\n  children,\n  fab,\n  pageTitle,\n  errorMessage,\n  filteredNFTs\n}: NFTCardsContainerProps) {\n  // Material UI Theming.\n  const classes = useStyles()\n  return (\n    <ScrollableContainer maxWidth=\"xl\">\n      <Typography variant=\"h5\" component=\"h1\" className={classes.title}>\n        {pageTitle}\n      </Typography>\n      {filteredNFTs.length > 0 ? (\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          {children}\n        </Grid>\n      ) : (\n        <Box className={classes.emptyListBox}>\n          <Typography className={classes.emptyListText} variant=\"h4\">\n            No NFTs!\n          </Typography>\n          <Typography className={classes.emptyListText} variant=\"subtitle1\">\n            {errorMessage}\n          </Typography>\n        </Box>\n      )}\n      {fab}\n    </ScrollableContainer>\n  )\n}\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core\"\n\n// Custom layout for the Card component which shows the NFT image and data.\nexport default makeStyles((theme: Theme) =>\n  createStyles({\n    cardsBox: {\n      display: \"flex\",\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      flexWrap: \"wrap\",\n      flexShrink: 1\n    },\n    card: {\n      margin: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n      border: \"1px solid black\",\n      width: \"33vw\",\n      [theme.breakpoints.down(\"sm\")]: {\n        width: \"86vw\"\n      }\n    },\n    cardContent: {\n      padding: theme.spacing(1)\n    },\n    cardImage: {\n      width: \"100%\",\n      height: \"50vh\",\n      [theme.breakpoints.down(\"sm\")]: {\n        height: \"55vh\"\n      }\n    },\n    cardText: {\n      textAlign: \"left\"\n    }\n  })\n)\n","import {\n  createStyles,\n  makeStyles,\n  Theme,\n  Avatar,\n  Box,\n  Typography\n} from \"@material-ui/core\"\nimport Identicon from \"react-identicons\"\n\nexport interface BackdropProgressProps {\n  artist: string\n  owner: string\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    ownershipBox: {\n      marginTop: theme.spacing(2),\n      display: \"flex\",\n      width: \"100%\"\n    },\n    ownerArtistBox: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    ownershipText: {\n      textAlign: \"left\",\n      padding: 0,\n      margin: 0,\n      fontSize: \"0.8rem\"\n    },\n    avatar: {\n      backgroundColor: \"transparent\"\n    }\n  })\n)\n\n// Custom box container where the artist and owner clickable avatars are shown.\nexport default function ArtistOwnerInfoBox({\n  artist,\n  owner\n}: BackdropProgressProps) {\n  const classes = useStyles()\n\n  return (\n    <Box className={classes.ownershipBox}>\n      <Box className={classes.ownerArtistBox}>\n        <Typography\n          gutterBottom\n          variant=\"body1\"\n          className={classes.ownershipText}\n          color=\"textSecondary\"\n        >\n          {\"ARTIST\"}\n        </Typography>\n\n        <Avatar className={classes.avatar}>\n          <a\n            href={`https://ropsten.etherscan.io/address/${artist}`}\n            target=\"blank\"\n          >\n            <Identicon string={artist} size={32} />\n          </a>\n        </Avatar>\n      </Box>\n      <Box className={classes.ownerArtistBox}>\n        <Typography\n          gutterBottom\n          variant=\"body1\"\n          className={classes.ownershipText}\n          color=\"textSecondary\"\n        >\n          {\"OWNER\"}\n        </Typography>\n\n        <Avatar className={classes.avatar}>\n          <a\n            href={`https://ropsten.etherscan.io/address/${owner}`}\n            target=\"blank\"\n          >\n            <Identicon string={owner} size={32} />\n          </a>\n        </Avatar>\n      </Box>\n    </Box>\n  )\n}\n","import {\n  createStyles,\n  makeStyles,\n  Theme,\n  Backdrop,\n  CircularProgress\n} from \"@material-ui/core\"\n\nexport interface BackdropProgressProps {\n  open: boolean\n  onClose?: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    backdrop: {\n      zIndex: theme.zIndex.drawer + 1,\n      color: \"#FFF\"\n    }\n  })\n)\n\n// Custom circular progress component which act as an asynchronous loader.\nexport default function BackdropProgress({\n  open,\n  onClose\n}: BackdropProgressProps) {\n  const classes = useStyles()\n\n  return (\n    <Backdrop className={classes.backdrop} open={open} onClick={onClose}>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  )\n}\n","import React from \"react\"\n\n// Custom boolean condition with toggle on/off callbacks.\nexport default function useBooleanCondition(\n  start: boolean = false\n): [boolean, () => void, () => void] {\n  const [_status, setStatus] = React.useState<boolean>(start)\n\n  function toggleOn() {\n    setStatus(true)\n  }\n\n  function toggleOff() {\n    setStatus(false)\n  }\n\n  return [_status, toggleOn, toggleOff]\n}\n","import React from \"react\"\nimport AddPhotoAlternateIcon from \"@material-ui/icons/AddPhotoAlternate\"\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  Fab,\n  Box,\n  Typography,\n  Divider,\n  Card,\n  CardMedia,\n  CardActionArea,\n  CardContent\n} from \"@material-ui/core\"\nimport { useHistory } from \"react-router-dom\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport { NFT } from \"../types/Blockchain\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport NFTCardsContainer from \"../components/NFTCardsContainer\"\nimport cardStyles from \"../styles/cards\"\nimport ArtistOwnerInfoBox from \"../components/ArtistOwnerInfoBox\"\nimport BackdropProgress from \"../components/BackdropProgress\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    fab: {\n      position: \"absolute\",\n      right: theme.spacing(2),\n      bottom: theme.spacing(2)\n    }\n  })\n)\n\n// Shows the marketplace where to buy or get a license on the NFTs.\nexport default function MarketPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n  const cardsStyles = cardStyles()\n\n  // React router dom providers.\n  const history = useHistory()\n\n  // Backdrop progress.\n  const [_progress = true, startProgress, stopProgress] = useBooleanCondition()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const { _nfts } = providerContext\n\n  React.useEffect(() => {\n    startProgress()\n  }, [])\n\n  React.useEffect(() => {\n    stopProgress()\n  }, [_nfts])\n\n  const filteredNFTs =\n    _nfts.length > 0\n      ? _nfts.filter(\n          (nft: NFT) => nft.sellingPrice > 0 || nft.dailyLicensePrice > 0\n        )\n      : []\n  return (\n    <NFTCardsContainer\n      fab={\n        <Fab\n          className={classes.fab}\n          onClick={() => history.push(\"/market/mint\")}\n        >\n          <AddPhotoAlternateIcon />\n        </Fab>\n      }\n      pageTitle={\"MARKET\"}\n      errorMessage={\"There are no NFTs on sale or licensable yet!\"}\n      filteredNFTs={filteredNFTs}\n    >\n      {filteredNFTs.length > 0 &&\n        filteredNFTs\n          .sort((a: NFT, b: NFT) => a.id - b.id)\n          .map((nft: NFT, i: number) => (\n            <Box key={i} className={cardsStyles.cardsBox}>\n              <Card className={cardsStyles.card}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt={nft.metadata.title}\n                    image={nft.metadata.image}\n                    title={nft.metadata.title}\n                    className={cardsStyles.cardImage}\n                    onClick={() => history.push(`/market/${nft.id}`)}\n                  />\n                  <CardContent className={cardsStyles.cardContent}>\n                    <Box onClick={() => history.push(`/market/${nft.id}`)}>\n                      <Typography\n                        variant=\"h5\"\n                        component=\"h2\"\n                        className={cardsStyles.cardText}\n                      >\n                        {nft.metadata.title}\n                      </Typography>\n\n                      <Typography\n                        variant=\"h6\"\n                        component=\"h3\"\n                        className={cardsStyles.cardText}\n                        style={{ color: \"green\" }}\n                      >\n                        {Number(formatUnits(nft.sellingPrice.toString()))} {\"Ξ\"}{\" \"}\n                        /{\" \"}\n                        {Number(formatUnits(nft.dailyLicensePrice.toString()))}{\" \"}\n                        {\"Ξ\"}\n                      </Typography>\n                    </Box>\n                    <Typography\n                      gutterBottom\n                      variant=\"body2\"\n                      className={cardsStyles.cardText}\n                      color=\"textSecondary\"\n                      style={{ padding: 0, fontSize: \"0.8rem\" }}\n                    >\n                      <i>{\"List price / Daily license price\"}</i>\n                    </Typography>\n\n                    <Divider style={{ backgroundColor: \"black\" }} />\n\n                    <ArtistOwnerInfoBox artist={nft.artist} owner={nft.owner} />\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Box>\n          ))}\n      <BackdropProgress open={_progress} />\n    </NFTCardsContainer>\n  )\n}\n","import { Theme } from \"@material-ui/core\"\nimport React from \"react\"\n\n// Type for the Theme Context object.\nexport type ThemeContextType = {\n  _theme: Theme\n  toggleTheme: () => void\n}\n\nexport default React.createContext<ThemeContextType | null>(null)\n","import {\n  Avatar,\n  createStyles,\n  Divider,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  makeStyles,\n  Theme,\n  Typography\n} from \"@material-ui/core\"\nimport React from \"react\"\nimport StoreIcon from \"@material-ui/icons/Store\"\nimport CollectionsIcon from \"@material-ui/icons/Collections\"\nimport CropOriginalIcon from \"@material-ui/icons/CropOriginal\"\nimport DescriptionIcon from \"@material-ui/icons/Description\"\nimport Identicon from \"react-identicons\"\nimport { Link } from \"react-router-dom\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\n\nexport interface Props {\n  open: boolean\n  onClose?: () => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    list: {\n      width: 250\n    },\n    currentUser: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      padding: theme.spacing(2)\n    },\n    link: {\n      color: \"inherit\",\n      textDecoration: \"none\"\n    },\n    divider: {\n      marginLeft: \"5%\",\n      width: \"90%\"\n    }\n  })\n)\n\n// Custom sidebar menu which displays the current signer and the page shortcuts to navigate the dApp.\nexport default function Sidebar({ open, onClose }: Props) {\n  // Material UI Theming.\n  const classes = useStyles()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const { _signerAddress } = providerContext\n\n  return (\n    <Drawer anchor=\"left\" open={open} onClose={onClose}>\n      <div className={classes.list} role=\"presentation\">\n        <div className={classes.currentUser}>\n          <Avatar style={{ backgroundColor: \"transparent\" }}>\n            <a\n              href={`https://ropsten.etherscan.io/address/${_signerAddress}`}\n              target=\"blank\"\n            >\n              <Identicon string={_signerAddress} size={32} />\n            </a>\n          </Avatar>\n          <Typography variant=\"body1\">\n            {_signerAddress.substr(0, 12)}...\n            {_signerAddress.substr(38)}\n          </Typography>\n        </div>\n        <Divider />\n        <List>\n          <Link to=\"/market\" className={classes.link}>\n            <ListItem onClick={onClose} button>\n              <ListItemIcon>\n                <StoreIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Marketplace\" />\n            </ListItem>\n          </Link>\n\n          <Link to=\"/artworks\" className={classes.link}>\n            <ListItem onClick={onClose} button>\n              <ListItemIcon>\n                <CropOriginalIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Your artworks\" />\n            </ListItem>\n          </Link>\n\n          <Link to=\"/collection\" className={classes.link}>\n            <ListItem onClick={onClose} button>\n              <ListItemIcon>\n                <CollectionsIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Your collection\" />\n            </ListItem>\n          </Link>\n\n          <Link to=\"/licenses\" className={classes.link}>\n            <ListItem onClick={onClose} button>\n              <ListItemIcon>\n                <DescriptionIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Your licenses\" />\n            </ListItem>\n          </Link>\n        </List>\n      </div>\n    </Drawer>\n  )\n}\n","import React from \"react\"\nimport {\n  Theme,\n  Typography,\n  Box,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Collapse,\n  IconButton,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText\n} from \"@material-ui/core\"\nimport createStyles from \"@material-ui/core/styles/createStyles\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport {\n  LicensePurchasedEvent,\n  NFT,\n  TokenPurchasedEvent\n} from \"../types/Blockchain\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport clsx from \"clsx\"\nimport Identicon from \"react-identicons\"\nimport NFTCardsContainer from \"../components/NFTCardsContainer\"\nimport cardStyles from \"../styles/cards\"\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\"\nimport BackdropProgress from \"../components/BackdropProgress\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    expand: {\n      transform: \"rotate(0deg)\",\n      marginLeft: \"auto\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: \"rotate(180deg)\"\n    },\n    list: {\n      width: \"100%\",\n      maxWidth: \"90%\",\n      backgroundColor: theme.palette.background.paper,\n      padding: 0\n    },\n    inline: {\n      display: \"inline\"\n    },\n    expandedContent: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\"\n    }\n  })\n)\n\n// Shows the NFT where the signer is the artist.\nexport default function ArtworksPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n  const cardsStyles = cardStyles()\n\n  // Token purchases events.\n  const [_tokenPurchases, setTokenPurchases] = React.useState<\n    Map<number, Array<TokenPurchasedEvent>>\n  >(new Map<number, Array<TokenPurchasedEvent>>())\n  // License purchases events.\n  const [_licensePurchases, setLicensePurchases] = React.useState<\n    Map<number, Array<LicensePurchasedEvent>>\n  >(new Map<number, Array<LicensePurchasedEvent>>())\n  // Expandable card.\n  const [_expanded, setExpanded, unsetExpanded] = useBooleanCondition()\n  // Backdrop progress.\n  const [_progress = true, startProgress, stopProgress] = useBooleanCondition()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const {\n    _nfts,\n    _signerAddress,\n    getTokenPurchasedEventsForNFT,\n    getLicensePurchasedEventsForNFT\n  } = providerContext\n\n  // Get token and licenses purchase from smart contract events.\n  React.useEffect(() => {\n    const getPurchases = async () => {\n      let tokenPurchases: Map<number, Array<TokenPurchasedEvent>> = new Map<\n        number,\n        Array<TokenPurchasedEvent>\n      >()\n      let licensePurchases: Map<number, Array<LicensePurchasedEvent>> = new Map<\n        number,\n        Array<LicensePurchasedEvent>\n      >()\n\n      for (let i = 0; i < _nfts.length; i++) {\n        tokenPurchases.set(\n          Number(_nfts[i].id),\n          await getTokenPurchasedEventsForNFT(Number(_nfts[i].id))\n        )\n        licensePurchases.set(\n          Number(_nfts[i].id),\n          await getLicensePurchasedEventsForNFT(Number(_nfts[i].id))\n        )\n      }\n\n      setTokenPurchases(tokenPurchases)\n      setLicensePurchases(licensePurchases)\n      stopProgress()\n    }\n\n    startProgress()\n    getPurchases()\n  }, [_nfts])\n\n  return (\n    <NFTCardsContainer\n      pageTitle={\"ARTWORKS\"}\n      errorMessage={\n        \"Make your craft and mint your unique NFT to see it shown on this page!\"\n      }\n      filteredNFTs={\n        _nfts.length > 0\n          ? _nfts.filter((a: NFT) => a.artist === _signerAddress)\n          : []\n      }\n    >\n      {_nfts.length > 0 &&\n        _nfts\n          .sort((a: NFT, b: NFT) => a.id - b.id)\n          .filter((a: NFT) => a.artist === _signerAddress)\n          .map((nft: NFT, i: number) => (\n            <Box key={i} className={cardsStyles.cardsBox}>\n              <Card className={cardsStyles.card}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt={nft.metadata.title}\n                    image={nft.metadata.image}\n                    title={nft.metadata.title}\n                    className={cardsStyles.cardImage}\n                  />\n                  <CardContent className={cardsStyles.cardContent}>\n                    <Box>\n                      <Typography\n                        variant=\"h5\"\n                        component=\"h2\"\n                        className={cardsStyles.cardText}\n                      >\n                        {nft.metadata.title}\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        component=\"h3\"\n                        className={cardsStyles.cardText}\n                        style={{ color: \"green\" }}\n                      >\n                        {_tokenPurchases.get(Number(nft.id))\n                          ? Number(\n                              formatUnits(\n                                _tokenPurchases\n                                  .get(Number(nft.id))!\n                                  .reduce(\n                                    (\n                                      acc: number,\n                                      event: TokenPurchasedEvent\n                                    ) => {\n                                      if (event) acc += Number(event.price)\n                                      return acc\n                                    },\n                                    0\n                                  )\n                                  .toString()\n                              )\n                            )\n                          : \"0\"}{\" \"}\n                        {\"Ξ\"} /{\" \"}\n                        {_licensePurchases.get(Number(nft.id))\n                          ? Number(\n                              formatUnits(\n                                _licensePurchases\n                                  .get(Number(nft.id))!\n                                  .reduce(\n                                    (\n                                      acc: number,\n                                      event: LicensePurchasedEvent\n                                    ) => {\n                                      if (event) acc += Number(event.price)\n                                      return acc\n                                    },\n                                    0\n                                  )\n                                  .toString()\n                              )\n                            )\n                          : \"0\"}{\" \"}\n                        {\"Ξ\"}\n                      </Typography>\n                    </Box>\n                    <Typography\n                      gutterBottom\n                      variant=\"body2\"\n                      className={cardsStyles.cardText}\n                      color=\"textSecondary\"\n                      style={{ padding: 0, fontSize: \"0.8rem\" }}\n                    >\n                      <i>{\"Reselling / Licensing total earnings\"}</i>\n                    </Typography>\n                    <IconButton\n                      className={clsx(classes.expand, {\n                        [classes.expandOpen]: _expanded\n                      })}\n                      onClick={_expanded ? unsetExpanded : setExpanded}\n                      aria-expanded={_expanded}\n                      aria-label=\"show more\"\n                      disabled={\n                        !_tokenPurchases.get(Number(nft.id))?.length &&\n                        !_licensePurchases.get(Number(nft.id))?.length\n                      }\n                    >\n                      <ExpandMoreIcon />\n                    </IconButton>\n\n                    <Collapse in={_expanded} timeout=\"auto\" unmountOnExit>\n                      <CardContent>\n                        <List className={classes.list}>\n                          {_tokenPurchases.get(Number(nft.id)) &&\n                            _licensePurchases.get(Number(nft.id)) &&\n                            [\n                              ..._tokenPurchases.get(Number(nft.id))!,\n                              ..._licensePurchases.get(Number(nft.id))!\n                            ]\n                              .sort(\n                                (a: any, b: any) => b.timestamp - a.timestamp\n                              )\n                              .map((purchasedEvent: any, i: number) => (\n                                <ListItem\n                                  alignItems=\"center\"\n                                  key={purchasedEvent.tokenId}\n                                >\n                                  <ListItemAvatar>\n                                    <a\n                                      href={`https://ropsten.etherscan.io/address/${\n                                        purchasedEvent.sender &&\n                                        purchasedEvent.sender.length > 0\n                                          ? purchasedEvent.sender\n                                          : purchasedEvent.newOwner\n                                      }`}\n                                      target=\"blank\"\n                                    >\n                                      <Identicon\n                                        string={\n                                          purchasedEvent.sender &&\n                                          purchasedEvent.sender.length > 0\n                                            ? purchasedEvent.sender\n                                            : purchasedEvent.newOwner\n                                        }\n                                        size={32}\n                                      />\n                                    </a>\n                                  </ListItemAvatar>\n                                  <ListItemText\n                                    style={{ minWidth: \"100%\" }}\n                                    primary={\n                                      <Box\n                                        style={{\n                                          display: \"flex\",\n                                          justifyContent: \"space-between\"\n                                        }}\n                                      >\n                                        <Typography\n                                          component=\"span\"\n                                          variant=\"h6\"\n                                          className={classes.inline}\n                                          color=\"textPrimary\"\n                                        >\n                                          {purchasedEvent.sender &&\n                                          purchasedEvent.sender.length > 0\n                                            ? `Bought a License!`\n                                            : `Bought the NFT!`}\n                                        </Typography>\n                                        <a\n                                          href={`https://ropsten.etherscan.io/tx/${purchasedEvent.txHash}`}\n                                          target=\"blank\"\n                                          style={{\n                                            alignItems: \"center\",\n                                            display: \"flex\"\n                                          }}\n                                        >\n                                          <VerifiedUserIcon\n                                            style={{\n                                              color: \"green\",\n                                              fontSize: \"1.2rem\"\n                                            }}\n                                          />\n                                        </a>\n                                      </Box>\n                                    }\n                                    secondary={\n                                      <Box className={classes.expandedContent}>\n                                        <Typography\n                                          component=\"span\"\n                                          variant=\"body1\"\n                                          className={classes.inline}\n                                          color=\"textPrimary\"\n                                        >\n                                          {`For`}{\" \"}\n                                          <b style={{ color: \"green\" }}>\n                                            {\" \"}\n                                            {`${formatUnits(\n                                              purchasedEvent.price\n                                            )}`}{\" \"}\n                                            Ξ\n                                          </b>\n                                          {purchasedEvent.sender &&\n                                          purchasedEvent.sender.length > 0\n                                            ? ` x ${purchasedEvent.durationInDays} days`\n                                            : \"\"}\n                                        </Typography>\n                                        <Typography\n                                          component=\"span\"\n                                          variant=\"body2\"\n                                          className={classes.inline}\n                                          color=\"textPrimary\"\n                                        >\n                                          {` At ${new Date(\n                                            Number(purchasedEvent.timestamp)\n                                          ).toLocaleString()}`}\n                                        </Typography>\n                                      </Box>\n                                    }\n                                  />\n                                  <Divider\n                                    variant=\"inset\"\n                                    style={{ backgroundColor: \"black\" }}\n                                  />\n                                </ListItem>\n                              ))}\n                        </List>\n                      </CardContent>\n                    </Collapse>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Box>\n          ))}\n      <BackdropProgress open={_progress} />\n    </NFTCardsContainer>\n  )\n}\n","import React from \"react\"\nimport ScrollableContainer from \"../components/ScrollableContainer\"\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  Typography,\n  TextField,\n  Button,\n  Box,\n  Checkbox,\n  FormControlLabel\n} from \"@material-ui/core\"\nimport { useHistory } from \"react-router-dom\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport BackdropProgress from \"../components/BackdropProgress\"\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\nimport { parseUnits } from \"@ethersproject/units\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      textAlign: \"center\",\n      justifyContent: \"center\"\n    },\n    text: {\n      wordWrap: \"break-word\",\n      textDecorationColor: \"default\",\n      textAlign: \"center\"\n    },\n    title: {\n      textAlign: \"center\"\n    },\n    button: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1)\n    },\n    uploadButton: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      width: \"80%\",\n      height: \"50vh\"\n    },\n    input: {\n      display: \"none\"\n    },\n    imagePreviewContainer: {\n      width: \"100%\"\n    },\n    image: {\n      width: \"80%\",\n      pointerEvents: \"none\",\n      marginBottom: theme.spacing(2)\n    },\n    authContent: {\n      textAlign: \"center\",\n      margin: theme.spacing(2)\n    },\n    checkboxes: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    }\n  })\n)\n\n// Form with necessary information for minting a new NFT.\nexport default function MintNFTPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n\n  // Form input data.\n  const [_title, setTitle] = React.useState<string>(\"\")\n  const [_description, setDescription] = React.useState<string>(\"\")\n  const [_creator, setCreator] = React.useState<string>(\"\")\n  const [_year, setYear] = React.useState<string>(\"\")\n  const [_sellingPrice, setSellingPrice] = React.useState<string>(\"\")\n  const [_dailyLicensePrice, setDailyLicensePrice] = React.useState<string>(\"\")\n  // Backdrop progress.\n  const [_progress, startProgress, stopProgress] = useBooleanCondition()\n  // Uploaded image preview and for IPFS.\n  const [_uploadedImagePreview, setUploadedImagePreview] = React.useState<any>()\n  const [_uploadedImageIpfs, setUploadedImageIpfs] = React.useState<any>()\n  // Checkboxes.\n  const [_checked, setChecked] = React.useState({\n    first: false,\n    second: false,\n    third: false\n  })\n\n  // React router dom providers.\n  const history = useHistory()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const { mintNFT } = providerContext\n\n  /**\n   * Get an image and prepare it in case of IPFS upload.\n   * @param e <any> - Input upload image event.\n   */\n  const uploadImage = (e: any) => {\n    e.preventDefault()\n\n    // Get the uploaded file.\n    const file = e.target.files[0]\n    setUploadedImagePreview(URL.createObjectURL(file))\n\n    // Prepare image for IPFS upload.\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      setUploadedImageIpfs(reader.result)\n    }\n  }\n\n  // Handle the checkboxes status.\n  const onCheck = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked({ ..._checked, [event.target.name]: event.target.checked })\n  }\n\n  // Send a transaction to the blockchain for minting a token.\n  const issueToken = async () => {\n    startProgress()\n\n    // Parse from ethers to wei.\n    const sellingPriceInWei = Number(parseUnits(_sellingPrice, 18)).toString()\n    const dailyLicensePriceInWei = Number(\n      parseUnits(_dailyLicensePrice, 18)\n    ).toString()\n\n    // Send tx.\n    await mintNFT({\n      title: _title,\n      description: _description,\n      creator: _creator,\n      year: _year,\n      image: _uploadedImageIpfs,\n      sellingPrice: sellingPriceInWei,\n      dailyLicensePrice: dailyLicensePriceInWei\n    })\n\n    stopProgress()\n\n    // Redirect to marketplace.\n    history.replace(\"/market\")\n  }\n\n  // Clear image upload and form inputs.\n  const onCancel = () => {\n    setTitle(\"\")\n    setDescription(\"\")\n    setYear(\"\")\n    setCreator(\"\")\n    setSellingPrice(\"\")\n    setDailyLicensePrice(\"\")\n    setUploadedImagePreview(null)\n    setUploadedImageIpfs(null)\n    setChecked({ first: false, second: false, third: false })\n  }\n\n  return (\n    <ScrollableContainer className={classes.container} maxWidth=\"md\">\n      <Typography variant=\"h5\" component=\"h1\" className={classes.title}>\n        {\"MINT YOUR NFT\"}\n      </Typography>\n\n      <Box className={classes.imagePreviewContainer}>\n        {_uploadedImagePreview ? (\n          <img\n            src={_uploadedImagePreview}\n            className={classes.image}\n            alt=\"\"\n          ></img>\n        ) : (\n          <Button\n            variant=\"outlined\"\n            color=\"inherit\"\n            className={classes.uploadButton}\n            startIcon={<CloudUploadIcon />}\n            component=\"label\"\n          >\n            Upload Image\n            <input\n              accept=\"image/*\"\n              className={classes.input}\n              id=\"upload-button\"\n              type=\"file\"\n              onChange={uploadImage}\n              hidden\n            />\n          </Button>\n        )}\n        {_title ? (\n          <Typography variant=\"body1\" className={classes.text}>\n            <b>\n              {_title} ({_year})\n            </b>\n          </Typography>\n        ) : null}\n        <Typography variant=\"body2\" className={classes.text}>\n          <i>{_description}</i>\n        </Typography>\n        {_creator ? (\n          <Typography variant=\"body2\">© {_creator}</Typography>\n        ) : null}\n      </Box>\n\n      <TextField\n        value={_title}\n        onChange={(event) => setTitle(event.target.value)}\n        margin=\"dense\"\n        label=\"Title\"\n        disabled={_uploadedImagePreview ? false : true}\n      />\n\n      <TextField\n        value={_description}\n        onChange={(event) => setDescription(event.target.value)}\n        margin=\"dense\"\n        label=\"Description\"\n        disabled={_uploadedImagePreview ? false : true}\n      />\n\n      <TextField\n        value={_creator}\n        onChange={(event) => setCreator(event.target.value)}\n        margin=\"dense\"\n        label=\"Original Creator\"\n        disabled={_uploadedImagePreview ? false : true}\n      />\n\n      <TextField\n        type=\"number\"\n        value={_year}\n        onChange={(event) => setYear(event.target.value)}\n        margin=\"dense\"\n        label=\"Year\"\n        disabled={_uploadedImagePreview ? false : true}\n      />\n\n      <TextField\n        value={_sellingPrice}\n        onChange={(event) => setSellingPrice(event.target.value)}\n        margin=\"dense\"\n        label=\"Selling Price (Ξ)\"\n        placeholder=\"0.1\"\n        disabled={_uploadedImagePreview ? false : true}\n      />\n\n      <TextField\n        value={_dailyLicensePrice}\n        onChange={(event) => setDailyLicensePrice(event.target.value)}\n        margin=\"dense\"\n        label=\"Daily License Price (Ξ)\"\n        placeholder=\"0.001\"\n        disabled={_uploadedImagePreview ? false : true}\n      />\n\n      <Box className={classes.authContent}>\n        <Box className={classes.checkboxes}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={_checked.first}\n                onChange={onCheck}\n                name=\"first\"\n                color=\"default\"\n              />\n            }\n            label={\n              <Typography gutterBottom variant=\"body1\" className={classes.text}>\n                {\n                  \"This artwork is original and does not contain any copyrighted or restricted imagery or audio\"\n                }\n              </Typography>\n            }\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={_checked.second}\n                onChange={onCheck}\n                name=\"second\"\n                color=\"default\"\n              />\n            }\n            label={\n              <Typography gutterBottom variant=\"body1\" className={classes.text}>\n                {\n                  \"This artwork is not and will not be tokenized or available for digital purchase elsewhere\"\n                }\n              </Typography>\n            }\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={_checked.third}\n                onChange={onCheck}\n                name=\"third\"\n                color=\"default\"\n              />\n            }\n            label={\n              <Typography variant=\"body1\" className={classes.text}>\n                I agree to the{\" \"}\n                <Button variant=\"text\" color=\"primary\">\n                  <u>Terms of Service</u>\n                </Button>\n              </Typography>\n            }\n          />\n          <Button\n            className={classes.button}\n            onClick={issueToken}\n            variant=\"outlined\"\n            color=\"inherit\"\n            disabled={\n              _sellingPrice &&\n              _dailyLicensePrice &&\n              _checked.first &&\n              _checked.second &&\n              _checked.third\n                ? false\n                : true\n            }\n          >\n            Tokenize\n          </Button>\n          <Button\n            className={classes.button}\n            onClick={onCancel}\n            variant=\"outlined\"\n            disabled={_uploadedImagePreview ? false : true}\n          >\n            Cancel\n          </Button>\n        </Box>\n      </Box>\n\n      <BackdropProgress open={_progress} />\n    </ScrollableContainer>\n  )\n}\n","import React from \"react\"\nimport {\n  Theme,\n  Typography,\n  Divider,\n  Box,\n  Button,\n  Radio,\n  FormControl,\n  FormControlLabel,\n  RadioGroup,\n  Slider\n} from \"@material-ui/core\"\nimport createStyles from \"@material-ui/core/styles/createStyles\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport { LicensePurchasedEvent, NFT } from \"../types/Blockchain\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport BackdropProgress from \"../components/BackdropProgress\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\nimport ScrollableContainer from \"../components/ScrollableContainer\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport { BigNumber } from \"ethers\"\nimport ArtistOwnerInfoBox from \"../components/ArtistOwnerInfoBox\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    image: {\n      width: \"100%\",\n      pointerEvents: \"none\",\n      marginBottom: theme.spacing(1)\n    },\n    divider: {\n      backgroundColor: \"black\",\n      width: \"95%\"\n    },\n    emptyListBox: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      paddingBottom: theme.spacing(8)\n    },\n    emptyListText: {\n      color: theme.palette.text.hint\n    },\n    purchaseTitle: {\n      marginTop: theme.spacing(1)\n    },\n    formGroup: {\n      width: \"100%\"\n    },\n    formControl: {\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    formControlLabel: {\n      border: \"1px solid black\",\n      padding: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginLeft: theme.spacing(2)\n    },\n    labelBox: {\n      textAlign: \"center\",\n      width: \"100%\",\n      marginLeft: theme.spacing(3)\n    },\n    button: {\n      width: \"95%\",\n      padding: theme.spacing(2)\n    },\n    cardText: {\n      textAlign: \"left\"\n    }\n  })\n)\n\n// Enables the user to purchase the NFT or buy a license on a daily-base fee.\nexport default function MarketableNFTPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n\n  // State.\n  const [_nft, setNft] = React.useState<NFT>()\n  // Backdrop progress.\n  const [_progress = true, startProgress, stopProgress] = useBooleanCondition()\n  // Radio buttons.\n  const [_buyRadio, checkBuyRadio, uncheckBuyRadio] = useBooleanCondition()\n  const [_licenseRadio, checkLicenseRadio, uncheckLicenseRadio] =\n    useBooleanCondition()\n  // Slider value.\n  const [_days, setDays] = React.useState<number>(1)\n  // User License Validity.\n  const [_hasValidLicense, setHasValidLicense] = React.useState<boolean>(false)\n\n  // Retrieve the id from the url.\n  const { id } = useParams<any>()\n\n  // React router dom providers.\n  const history = useHistory()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const {\n    _signerAddress,\n    buyNFT,\n    buyLicense,\n    getLicensePurchasedEventsForNFT\n  } = providerContext\n\n  // Retrieve the nfts at the startup.\n  React.useEffect(() => {\n    startProgress()\n\n    setNft(providerContext._nfts.find((nft) => Number(nft.id) === Number(id)))\n  }, [providerContext._nfts.length > 0])\n\n  // Retrieve the licenses on the NFT to check if there's a valid license bought from the current connected tx signer.\n  React.useEffect(() => {\n    const getLicenses = async () => {\n      if (_nft) {\n        const licensesForNFT = await getLicensePurchasedEventsForNFT(\n          Number(_nft.id)\n        )\n\n        const filteredLicenses = licensesForNFT.filter(\n          (licenseEvent: LicensePurchasedEvent) =>\n            licenseEvent.sender === _signerAddress\n        )\n\n        if (filteredLicenses.length > 0) {\n          setHasValidLicense(\n            filteredLicenses.filter(\n              (license: LicensePurchasedEvent) =>\n                Number(license.endDateInMillis) - new Date().getTime()\n            ).length > 0\n          )\n        } else {\n          setHasValidLicense(false)\n        }\n      }\n    }\n\n    getLicenses()\n    stopProgress()\n  }, [_nft, providerContext._signerAddress])\n\n  // Radio buttons callbacks.\n  const handleBuyRadio = () => {\n    checkBuyRadio()\n    uncheckLicenseRadio()\n    setDays(1)\n  }\n\n  const handleLicenseRadio = () => {\n    checkLicenseRadio()\n    uncheckBuyRadio()\n  }\n\n  // Day picker.\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    setDays(typeof newValue === \"number\" ? newValue : 1)\n  }\n\n  // Sends a tx to buy the NFT or get a license based on the signer selection.\n  const handleBuy = async () => {\n    startProgress()\n\n    if (_nft && _buyRadio) {\n      // Send tx.\n      await buyNFT({\n        id,\n        txValue: BigNumber.from(_nft.sellingPrice)\n      })\n\n      stopProgress()\n\n      // Redirect.\n      history.replace(`/collection/${_nft.id}`)\n    } else {\n      if (_nft && _licenseRadio) {\n        const bgDays = BigNumber.from(_days)\n        const bgDailyLicensePrice = BigNumber.from(_nft.dailyLicensePrice)\n\n        // Send tx.\n        await buyLicense({\n          id,\n          days: _days,\n          txValue: bgDailyLicensePrice.mul(bgDays)\n        })\n\n        stopProgress()\n\n        // Redirect.\n        history.replace(`/licenses`)\n      }\n    }\n  }\n\n  return (\n    <ScrollableContainer className={classes.container} maxWidth=\"md\">\n      {_nft && (\n        <>\n          <a target=\"blank\" href={`${_nft.metadata.image}`}>\n            <img\n              src={_nft.metadata.image}\n              className={classes.image}\n              alt=\"\"\n            ></img>\n          </a>\n          <Typography variant=\"h4\" component=\"h1\">\n            {_nft.metadata.title}\n          </Typography>\n\n          <Typography variant=\"body1\" component=\"p\" gutterBottom>\n            {_nft.metadata.description}\n          </Typography>\n\n          <Divider className={classes.divider} />\n          <Box style={{ marginBottom: \"8px\", width: \"100%\" }}>\n            <ArtistOwnerInfoBox artist={_nft.artist} owner={_nft.owner} />\n          </Box>\n          {_nft.owner !== _signerAddress && (\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n              <RadioGroup\n                aria-label=\"position\"\n                name=\"position\"\n                defaultValue=\"top\"\n                className={classes.formGroup}\n              >\n                {Number(_nft.sellingPrice) > 0 && (\n                  <FormControlLabel\n                    value=\"value1\"\n                    control={<Radio color=\"primary\" onClick={handleBuyRadio} />}\n                    className={classes.formControlLabel}\n                    label={\n                      <Box className={classes.labelBox}>\n                        <Typography\n                          variant=\"body1\"\n                          component=\"h6\"\n                          className={classes.purchaseTitle}\n                        >\n                          <b>{\"BUY NFT \"}</b>\n                        </Typography>\n\n                        <Typography variant=\"body1\" component=\"p\">\n                          {\"Price \"}{\" \"}\n                          <b>\n                            {Number(formatUnits(_nft.sellingPrice.toString()))}{\" \"}\n                            {\"Ξ\"}\n                          </b>\n                        </Typography>\n\n                        <Typography\n                          variant=\"body1\"\n                          component=\"p\"\n                          color=\"textSecondary\"\n                        >\n                          {\"7% resale fee for the artist\"}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                )}\n                {Number(_nft.dailyLicensePrice) > 0 && !_hasValidLicense && (\n                  <FormControlLabel\n                    value=\"value2\"\n                    control={\n                      <Radio color=\"primary\" onClick={handleLicenseRadio} />\n                    }\n                    className={classes.formControlLabel}\n                    label={\n                      <Box className={classes.labelBox}>\n                        <Typography\n                          variant=\"body1\"\n                          component=\"h6\"\n                          className={classes.purchaseTitle}\n                        >\n                          <b>{\"GET A LICENSE\"}</b>\n                        </Typography>\n                        <Typography variant=\"body1\" component=\"p\">\n                          {\"Price (daily) \"}{\" \"}\n                          <b>\n                            {Number(\n                              formatUnits(_nft.dailyLicensePrice.toString())\n                            )}{\" \"}\n                            {\"Ξ\"}\n                          </b>\n                        </Typography>\n\n                        <Typography\n                          variant=\"body1\"\n                          component=\"p\"\n                          color=\"textSecondary\"\n                          gutterBottom\n                        >\n                          {\"3% resale fee for the artist\"}\n                        </Typography>\n\n                        <Slider\n                          defaultValue={1}\n                          step={1}\n                          min={1}\n                          max={90}\n                          value={_days}\n                          onChange={handleSliderChange}\n                          disabled={!_licenseRadio}\n                          valueLabelDisplay=\"auto\"\n                          aria-labelledby=\"discrete-slider-custom\"\n                        />\n                        <Typography\n                          variant=\"body2\"\n                          component=\"p\"\n                          color=\"textSecondary\"\n                          gutterBottom\n                        >\n                          {\"License expiration in \"} {_days} {\" days\"}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                )}\n              </RadioGroup>\n              {(Number(_nft.sellingPrice) !== 0 ||\n                (Number(_nft.dailyLicensePrice) !== 0 && _hasValidLicense)) && (\n                <Button\n                  variant=\"outlined\"\n                  color=\"inherit\"\n                  className={classes.button}\n                  disabled={!_buyRadio && !_licenseRadio}\n                  onClick={handleBuy}\n                >\n                  {_buyRadio && \"BUY NFT\"}\n                  {_licenseRadio &&\n                    `BUY LICENSE FOR ${(\n                      Number(formatUnits(_nft.dailyLicensePrice.toString())) *\n                      _days\n                    )\n                      .toString()\n                      .substr(0, 6)} Ξ`}\n                  {!_buyRadio && !_licenseRadio ? \"...\" : \"\"}\n                </Button>\n              )}\n            </FormControl>\n          )}\n        </>\n      )}\n      {!_nft && (\n        <Box className={classes.emptyListBox}>\n          <Typography className={classes.emptyListText} variant=\"h4\">\n            {\"No NFT!\"}\n          </Typography>\n          <Typography className={classes.emptyListText} variant=\"subtitle1\">\n            {`Wrong identifier (${id})`}\n          </Typography>\n        </Box>\n      )}\n      <BackdropProgress open={_progress} />\n    </ScrollableContainer>\n  )\n}\n","import axios from \"axios\"\n\n/**\n * Execute the web detection for a specified image stored on IPFS.\n * @param {string} ipfsCID The unique resource locator where the image is stored on IPFS.\n * @returns {Promise<any>} An object containing the detected pages json object.\n */\nexport default async function webDetect(ipfsCID: string): Promise<any> {\n  try {\n    const response = await axios.post(`http://localhost:8080/detect`, {\n      ipfsCID: ipfsCID\n    })\n\n    if (response.status === 200 && response.data) {\n      return response.data\n    }\n  } catch (error) {\n    console.error(error)\n    throw error\n  }\n}\n","import React from \"react\"\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  Box,\n  Typography,\n  Divider,\n  Card,\n  CardMedia,\n  CardActionArea,\n  CardContent,\n  IconButton,\n  Collapse,\n  List,\n  ListItem,\n  ListItemText\n} from \"@material-ui/core\"\nimport { useHistory } from \"react-router-dom\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport { InfringmentAttemptsRecordedEvent, NFT } from \"../types/Blockchain\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport WarningIcon from \"@material-ui/icons/Warning\"\nimport SyncIcon from \"@material-ui/icons/Sync\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport clsx from \"clsx\"\nimport NFTCardsContainer from \"../components/NFTCardsContainer\"\nimport cardStyles from \"../styles/cards\"\nimport ImageSearchIcon from \"@material-ui/icons/ImageSearch\"\nimport webDetect from \"../utils/webDetection\"\nimport { IPRInfringmentAttempt } from \"../types/WebDetection\"\nimport crypto from \"crypto\"\nimport BackdropProgress from \"../components/BackdropProgress\"\nimport HelpIcon from \"@material-ui/icons/Help\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    iprBox: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      marginTop: theme.spacing(1)\n    },\n    iprReportText: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    icon: {\n      padding: theme.spacing(1)\n    },\n    expand: {\n      transform: \"rotate(0deg)\",\n      marginLeft: \"auto\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: \"rotate(180deg)\"\n    },\n    list: {\n      width: \"100%\",\n      maxWidth: \"90%\",\n      backgroundColor: theme.palette.background.paper,\n      padding: 0\n    },\n    inline: {\n      display: \"inline\"\n    },\n    expandedContent: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\"\n    },\n    imageLinkIcon: {\n      color: theme.palette.primary.main\n    },\n    sourceLocation: {\n      color: theme.palette.secondary.main\n    }\n  })\n)\n\n// Shows the NFTs where the user is the owner.\nexport default function CollectionPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n  const cardsStyles = cardStyles()\n\n  // React router dom providers.\n  const history = useHistory()\n\n  // IPR infringment attempts for each NFT.\n  const [_infringmentAttempts, setInfringmentAttempts] = React.useState<\n    Map<number, Array<IPRInfringmentAttempt>>\n  >(new Map<number, Array<IPRInfringmentAttempt>>())\n  // Last detected timestamp.\n  const [_lastDetectedTimestamps, setLastDetectedTimestamps] = React.useState<\n    Map<number, number>\n  >(new Map<number, number>())\n  // Last detected number of attempts.\n  const [_lastDetectedTotalAttempts, setLastDetectedTotalAttempts] =\n    React.useState<Map<number, number>>(new Map<number, number>())\n  // Backdrop progress.\n  const [_progress = true, startProgress, stopProgress] = useBooleanCondition()\n  // Expandable buttons.\n  const [_expandableButtons, setExpandableButtons] = React.useState<\n    Array<boolean>\n  >([])\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const {\n    _nfts,\n    _signerAddress,\n    getInfringmentAttemptsRecordedEventForNFT,\n    recordIPRInfringementAttempts\n  } = providerContext\n\n  const detectIPRInfringmentAttempts = async (id: number) => {\n    if (_nfts.length > 0) {\n      // Shallow state copy.\n      let attempts = _infringmentAttempts\n      let timestamps = _lastDetectedTimestamps\n      let totalAttempts = _lastDetectedTotalAttempts\n      let expandableButtons = _expandableButtons\n\n      // Elements to be modified.\n      let nft = _nfts[id]\n\n      if (nft.owner === _signerAddress) {\n        // Get data from Google Web Detection APIs.\n        const response = await webDetect(nft.metadata.image)\n\n        // Interact with the Blockchain.\n        if (response && response.pagesWithMatchingImages) {\n          // Set attempts.\n          attempts.set(Number(nft.id), response.pagesWithMatchingImages)\n\n          // Calculate the hash.\n          const infringmentAttemptsHash =\n            \"0x\" +\n            crypto\n              .createHash(\"sha256\")\n              .update(JSON.stringify(response.pagesWithMatchingImages))\n              .digest(\"hex\")\n\n          // Get the last recorded hash from the blockchain.\n          const infringmentAttemptsForNFT =\n            await getInfringmentAttemptsRecordedEventForNFT(Number(nft.id))\n\n          if (infringmentAttemptsForNFT.length > 0) {\n            const lastAttempts: InfringmentAttemptsRecordedEvent =\n              infringmentAttemptsForNFT[infringmentAttemptsForNFT.length - 1]\n\n            // Update blockchain state.\n            if (\n              lastAttempts.infringmentAttemptsHash !== infringmentAttemptsHash\n            ) {\n              const timestamp = Date.now()\n              // Send tx.\n              await recordIPRInfringementAttempts({\n                tokenId: Number(nft.id),\n                timestamp: timestamp,\n                totalAttempts: response.pagesWithMatchingImages.length,\n                infringmentAttemptsHash: infringmentAttemptsHash\n              })\n\n              timestamps.set(Number(nft.id), timestamp)\n              totalAttempts.set(\n                Number(nft.id),\n                response.pagesWithMatchingImages.length\n              )\n              expandableButtons[nft.id] = true\n            } else {\n              timestamps.set(Number(nft.id), Number(lastAttempts.timestamp))\n              totalAttempts.set(\n                Number(nft.id),\n                response.pagesWithMatchingImages.length\n              )\n              expandableButtons[nft.id] = true\n            }\n          } else {\n            // First detection.\n            if (response.pagesWithMatchingImages) {\n              const timestamp = Date.now()\n              // Send tx.\n              await recordIPRInfringementAttempts({\n                tokenId: Number(nft.id),\n                timestamp: timestamp,\n                totalAttempts: response.pagesWithMatchingImages.length,\n                infringmentAttemptsHash: infringmentAttemptsHash\n              })\n\n              timestamps.set(Number(nft.id), timestamp)\n              totalAttempts.set(\n                Number(nft.id),\n                response.pagesWithMatchingImages.length\n              )\n              expandableButtons[nft.id] = true\n            }\n          }\n        }\n      }\n      setInfringmentAttempts(attempts)\n      setLastDetectedTimestamps(timestamps)\n      setLastDetectedTotalAttempts(totalAttempts)\n      setExpandableButtons(expandableButtons)\n      stopProgress()\n    }\n  }\n\n  const handleWebDetection = (e: any) => {\n    startProgress()\n    detectIPRInfringmentAttempts(e.target.id)\n  }\n\n  React.useEffect(() => {\n    const getInfringmentsAttemptsFromBlockchain = async () => {\n      let timestamps = new Map<number, number>()\n      let totalAttempts = new Map<number, number>()\n      let expandableButtons: Array<boolean> = []\n\n      // For each NFT that belongs to the current signer.\n      for (let i = 0; i < _nfts.length; i++) {\n        if (_nfts[i].owner === _signerAddress) {\n          // Get the last recorded hash from the blockchain.\n          const infringmentAttemptsForNFT =\n            await getInfringmentAttemptsRecordedEventForNFT(Number(_nfts[i].id))\n\n          if (infringmentAttemptsForNFT.length > 0) {\n            const lastAttempts: InfringmentAttemptsRecordedEvent =\n              infringmentAttemptsForNFT[infringmentAttemptsForNFT.length - 1]\n\n            timestamps.set(Number(_nfts[i].id), Number(lastAttempts.timestamp))\n            totalAttempts.set(\n              Number(_nfts[i].id),\n              Number(lastAttempts.totalAttempts)\n            )\n          }\n\n          expandableButtons.push(false)\n        }\n      }\n      setLastDetectedTimestamps(timestamps)\n      setLastDetectedTotalAttempts(totalAttempts)\n      setExpandableButtons(expandableButtons)\n    }\n\n    getInfringmentsAttemptsFromBlockchain()\n  }, [_nfts])\n\n  const handleExpandableButtonClick = (e: any) => {\n    let expandableButtons = [..._expandableButtons]\n    let expBtn = expandableButtons[e.target.id]\n    expBtn = !expBtn\n    expandableButtons[e.target.id] = expBtn\n    setExpandableButtons(expandableButtons)\n  }\n\n  return (\n    <NFTCardsContainer\n      pageTitle={\"YOUR COLLECTION\"}\n      errorMessage={\"There are no NFTs you own yet!\"}\n      filteredNFTs={\n        _nfts.length > 0\n          ? _nfts.filter((nft: NFT) => nft.owner === _signerAddress)\n          : []\n      }\n    >\n      {_nfts.length > 0 &&\n        _nfts\n          .sort((a: NFT, b: NFT) => a.id - b.id)\n          .filter((nft: NFT) => nft.owner === _signerAddress)\n          .map((nft: NFT, i: number) => (\n            <Box key={i} className={cardsStyles.cardsBox}>\n              <Card className={cardsStyles.card}>\n                <CardActionArea>\n                  <CardMedia\n                    component=\"img\"\n                    alt={nft.metadata.title}\n                    image={nft.metadata.image}\n                    title={nft.metadata.title}\n                    className={cardsStyles.cardImage}\n                    onClick={() => history.push(`/collection/${nft.id}`)}\n                  />\n                  <CardContent className={cardsStyles.cardContent}>\n                    <Box onClick={() => history.push(`/collection/${nft.id}`)}>\n                      <Typography\n                        variant=\"h5\"\n                        component=\"h2\"\n                        className={cardsStyles.cardText}\n                      >\n                        {nft.metadata.title}\n                      </Typography>\n\n                      <Typography\n                        variant=\"h6\"\n                        component=\"h3\"\n                        className={cardsStyles.cardText}\n                        style={{ color: \"green\" }}\n                      >\n                        {Number(formatUnits(nft.sellingPrice.toString()))} {\"Ξ\"}{\" \"}\n                        /{\" \"}\n                        {Number(formatUnits(nft.dailyLicensePrice.toString()))}{\" \"}\n                        {\"Ξ\"}\n                      </Typography>\n                      <Typography\n                        gutterBottom\n                        variant=\"body2\"\n                        className={cardsStyles.cardText}\n                        color=\"textSecondary\"\n                        style={{ padding: 0, fontSize: \"0.8rem\" }}\n                      >\n                        <i>{\"List price / Daily license price\"}</i>\n                      </Typography>\n                    </Box>\n                    {!_lastDetectedTimestamps.get(Number(nft.id)) ? (\n                      <>\n                        <Divider style={{ backgroundColor: \"black\" }} />\n                        <Box className={classes.iprBox}>\n                          <Box>\n                            <Typography\n                              variant=\"body1\"\n                              component=\"h3\"\n                              className={classes.iprReportText}\n                              style={{ marginLeft: \"8px\" }}\n                            >\n                              <HelpIcon style={{ marginRight: \"8px\" }} />{\" \"}\n                              {\" No detection executed!\"}\n                            </Typography>\n                          </Box>\n                          <IconButton\n                            onClick={handleWebDetection}\n                            style={{ padding: 0 }}\n                          >\n                            <SyncIcon\n                              id={i.toString()}\n                              className={classes.icon}\n                            />\n                          </IconButton>\n                        </Box>\n                        <IconButton\n                          className={clsx(classes.expand, {\n                            [classes.expandOpen]: _expandableButtons[i]\n                          })}\n                          onClick={handleExpandableButtonClick}\n                          aria-expanded={_expandableButtons[i]}\n                          aria-label=\"show more\"\n                          disabled={\n                            !_lastDetectedTimestamps.get(Number(nft.id))\n                          }\n                        >\n                          <ExpandMoreIcon id={i.toString()} />\n                        </IconButton>\n                      </>\n                    ) : (\n                      <>\n                        <Divider style={{ backgroundColor: \"black\" }} />\n                        <Box className={classes.iprBox}>\n                          <Box>\n                            <Typography\n                              variant=\"body1\"\n                              component=\"h3\"\n                              className={classes.iprReportText}\n                              style={{\n                                color:\n                                  _lastDetectedTotalAttempts.get(\n                                    Number(nft.id)\n                                  )! > 0\n                                    ? \"darkred\"\n                                    : \"darkgreen\"\n                              }}\n                            >\n                              <WarningIcon className={classes.icon} />{\" \"}\n                              {_lastDetectedTotalAttempts.get(Number(nft.id))!}\n                              {\" IPR Infringement Attempts\"}\n                            </Typography>\n\n                            <Typography\n                              gutterBottom\n                              variant=\"body2\"\n                              className={cardsStyles.cardText}\n                              color=\"textSecondary\"\n                              style={{\n                                marginLeft: \"8px\",\n                                fontSize: \"0.8rem\"\n                              }}\n                            >\n                              <i>\n                                {_lastDetectedTimestamps.get(Number(nft.id))\n                                  ? new Date(\n                                      _lastDetectedTimestamps.get(\n                                        Number(nft.id)\n                                      )!\n                                    ).toLocaleString()\n                                  : \"\"}\n                              </i>\n                            </Typography>\n                          </Box>\n                          <IconButton\n                            onClick={handleWebDetection}\n                            style={{ padding: 0 }}\n                          >\n                            <SyncIcon\n                              id={i.toString()}\n                              className={classes.icon}\n                            />\n                          </IconButton>\n                        </Box>\n                        <IconButton\n                          className={clsx(classes.expand, {\n                            [classes.expandOpen]: _expandableButtons[i]\n                          })}\n                          onClick={handleExpandableButtonClick}\n                          aria-expanded={_expandableButtons[i]}\n                          aria-label=\"show more\"\n                          disabled={!_infringmentAttempts.get(Number(nft.id))}\n                        >\n                          <ExpandMoreIcon id={i.toString()} />\n                        </IconButton>\n                      </>\n                    )}\n                    <Collapse\n                      in={_expandableButtons[i]}\n                      timeout=\"auto\"\n                      unmountOnExit\n                    >\n                      <CardContent>\n                        <List className={classes.list}>\n                          {_infringmentAttempts.get(Number(nft.id)) &&\n                            [..._infringmentAttempts.get(Number(nft.id))!].map(\n                              (\n                                infringmentAttempt: IPRInfringmentAttempt,\n                                i: number\n                              ) => (\n                                <Box key={i}>\n                                  <ListItem\n                                    alignItems=\"center\"\n                                    style={{ padding: 0, margin: 0 }}\n                                  >\n                                    <ListItemText\n                                      style={{\n                                        minWidth: \"100%\",\n                                        marginLeft: \"16px\"\n                                      }}\n                                      primary={\n                                        <Box\n                                          style={{\n                                            display: \"flex\",\n                                            justifyContent: \"space-between\"\n                                          }}\n                                        >\n                                          <Typography\n                                            component=\"span\"\n                                            variant=\"h6\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                          >\n                                            {`Attempt #${i + 1}`}\n                                          </Typography>\n                                          <a\n                                            href={`${\n                                              infringmentAttempt\n                                                .fullMatchingImages.length > 0\n                                                ? infringmentAttempt\n                                                    .fullMatchingImages[0].url\n                                                : infringmentAttempt\n                                                    .partialMatchingImages[0]\n                                                    .url\n                                            }`}\n                                            target=\"blank\"\n                                            style={{\n                                              alignItems: \"center\",\n                                              display: \"flex\"\n                                            }}\n                                          >\n                                            <ImageSearchIcon\n                                              className={classes.imageLinkIcon}\n                                            />\n                                          </a>\n                                        </Box>\n                                      }\n                                      secondary={\n                                        <>\n                                          <Box style={{ width: \"90%\" }}>\n                                            <Typography\n                                              component=\"span\"\n                                              variant=\"body1\"\n                                              className={classes.inline}\n                                              color=\"textSecondary\"\n                                            >\n                                              {\"Source: \"}\n                                              <b>\n                                                <a\n                                                  className={\n                                                    classes.sourceLocation\n                                                  }\n                                                  href={infringmentAttempt.url}\n                                                  target=\"blank\"\n                                                >\n                                                  {\n                                                    infringmentAttempt.url.split(\n                                                      \"/\"\n                                                    )[2]\n                                                  }\n                                                </a>\n                                              </b>\n                                            </Typography>\n                                          </Box>\n                                          <Divider\n                                            style={{\n                                              backgroundColor: \"black\",\n                                              marginTop: \"8px\"\n                                            }}\n                                          />\n                                        </>\n                                      }\n                                    />\n                                  </ListItem>\n                                </Box>\n                              )\n                            )}\n                        </List>\n                      </CardContent>\n                    </Collapse>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Box>\n          ))}\n      <BackdropProgress open={_progress} />\n    </NFTCardsContainer>\n  )\n}\n","import React from \"react\"\nimport {\n  Theme,\n  Typography,\n  Divider,\n  Box,\n  Button,\n  Radio,\n  FormControl,\n  FormControlLabel,\n  RadioGroup,\n  TextField\n} from \"@material-ui/core\"\nimport createStyles from \"@material-ui/core/styles/createStyles\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport { useParams } from \"react-router-dom\"\nimport { NFT } from \"../types/Blockchain\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport BackdropProgress from \"../components/BackdropProgress\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\nimport ScrollableContainer from \"../components/ScrollableContainer\"\nimport { formatUnits, parseUnits } from \"ethers/lib/utils\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    image: {\n      width: \"100%\",\n      pointerEvents: \"none\",\n      marginBottom: theme.spacing(1)\n    },\n    divider: {\n      backgroundColor: \"black\",\n      width: \"95%\"\n    },\n    emptyListBox: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      paddingBottom: theme.spacing(8)\n    },\n    emptyListText: {\n      color: theme.palette.text.hint\n    },\n    priceContainerBox: {\n      width: \"95%\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      justifyContent: \"space-between\",\n      padding: theme.spacing(1)\n    },\n    priceTitle: {\n      marginTop: theme.spacing(1)\n    },\n    ownershipContentBox: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      padding: theme.spacing(1)\n    },\n    ownershipText: {\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    avatar: {\n      backgroundColor: \"transparent\",\n      padding: theme.spacing(1)\n    },\n    formGroup: {\n      width: \"100%\"\n    },\n    formControl: {\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    formControlLabel: {\n      border: \"1px solid black\",\n      padding: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      marginLeft: theme.spacing(2)\n    },\n    labelBox: {\n      textAlign: \"center\",\n      width: \"100%\",\n      marginLeft: theme.spacing(3)\n    },\n    button: {\n      width: \"95%\",\n      padding: theme.spacing(2)\n    }\n  })\n)\n\n// Enable the owner to update selling and daily license prices.\nexport default function PurchasedNFTPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n\n  // State.\n  const [_nft, setNft] = React.useState<NFT>()\n  // New prices.\n  const [_newSellingPrice, setNewSellingPrice] = React.useState<string>(\"\")\n  const [_newDailyLicensePrice, setNewDailyLicensePrice] =\n    React.useState<string>(\"\")\n  // Backdrop progress.\n  const [_progress = true, startProgress, stopProgress] = useBooleanCondition()\n  // Radio buttons.\n  const [_buyPriceRadio, checkBuyPriceRadio, uncheckBuyPriceRadio] =\n    useBooleanCondition()\n  const [_licensePriceRadio, checkLicensePriceRadio, uncheckLicensePriceRadio] =\n    useBooleanCondition()\n\n  // Retrieve the id from the url.\n  const { id } = useParams<any>()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const { _signerAddress, updateSellingPrice, updateDailyLicensePrice } =\n    providerContext\n\n  React.useEffect(() => {\n    startProgress()\n\n    setNft(providerContext._nfts.find((nft) => Number(nft.id) === Number(id)))\n\n    stopProgress()\n  }, [providerContext._nfts])\n\n  const handleBuyPriceRadio = () => {\n    checkBuyPriceRadio()\n    uncheckLicensePriceRadio()\n    setNewDailyLicensePrice(\"\")\n  }\n\n  const handleLicensePriceRadio = () => {\n    checkLicensePriceRadio()\n    uncheckBuyPriceRadio()\n    setNewSellingPrice(\"\")\n  }\n\n  const handlePriceUpdate = async () => {\n    startProgress()\n\n    if (_nft && _buyPriceRadio && Number(_nft.sellingPrice) >= 0) {\n      const sellingPriceInWei = Number(\n        parseUnits(_newSellingPrice, 18)\n      ).toString()\n\n      // Send tx.\n      await updateSellingPrice({\n        tokenId: _nft.id,\n        newSellingPrice: sellingPriceInWei\n      })\n\n      stopProgress()\n    } else {\n      if (_nft && _licensePriceRadio && Number(_nft.dailyLicensePrice) >= 0) {\n        const dailyLicensePriceInWei = Number(\n          parseUnits(_newDailyLicensePrice, 18)\n        ).toString()\n\n        // Send tx.\n        await updateDailyLicensePrice({\n          tokenId: _nft.id,\n          newDailyLicensePrice: dailyLicensePriceInWei\n        })\n\n        stopProgress()\n      }\n    }\n  }\n\n  return (\n    <ScrollableContainer className={classes.container} maxWidth=\"md\">\n      {_nft && (\n        <>\n          <a target=\"blank\" href={`${_nft.metadata.image}`}>\n            <img\n              src={_nft.metadata.image}\n              className={classes.image}\n              alt=\"\"\n            ></img>\n          </a>\n          <Typography variant=\"h4\" component=\"h1\">\n            {_nft.metadata.title}\n          </Typography>\n\n          <Typography variant=\"body1\" component=\"p\" gutterBottom>\n            {_nft.metadata.description}\n          </Typography>\n\n          <Divider className={classes.divider} />\n          <Box className={classes.priceContainerBox}>\n            <Box className={classes.ownershipText}>\n              <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n                {\"SELLING PRICE\"}\n              </Typography>\n\n              <Typography\n                variant={_nft.sellingPrice > 0 ? \"h6\" : \"body2\"}\n                component=\"p\"\n                style={{\n                  textAlign: \"center\",\n                  color: _nft.sellingPrice > 0 ? \"green\" : \"red\"\n                }}\n              >\n                <b>\n                  {_nft.sellingPrice > 0\n                    ? `${Number(formatUnits(_nft.sellingPrice.toString()))} Ξ`\n                    : \"NOT FOR SALE\"}\n                </b>\n              </Typography>\n            </Box>\n            <Box className={classes.ownershipText}>\n              <Typography variant=\"body1\" component=\"p\" color=\"textSecondary\">\n                {\"DAILY LICENSE PRICE\"}\n              </Typography>\n\n              <Typography\n                variant={_nft.dailyLicensePrice > 0 ? \"body1\" : \"body2\"}\n                component=\"p\"\n                style={{\n                  textAlign: \"center\",\n                  color: _nft.dailyLicensePrice > 0 ? \"green\" : \"red\"\n                }}\n              >\n                <b>\n                  {_nft.dailyLicensePrice > 0\n                    ? `${Number(\n                        formatUnits(_nft.dailyLicensePrice.toString())\n                      )} Ξ`\n                    : \"NOT LICENSABLE\"}\n                </b>\n              </Typography>\n            </Box>\n          </Box>\n          {_nft.owner === _signerAddress && (\n            <FormControl component=\"fieldset\" className={classes.formControl}>\n              <RadioGroup\n                aria-label=\"position\"\n                name=\"position\"\n                defaultValue=\"top\"\n                className={classes.formGroup}\n              >\n                <FormControlLabel\n                  value=\"value1\"\n                  control={\n                    <Radio color=\"primary\" onClick={handleBuyPriceRadio} />\n                  }\n                  className={classes.formControlLabel}\n                  label={\n                    <Box className={classes.labelBox}>\n                      <Typography\n                        variant=\"body1\"\n                        component=\"h6\"\n                        className={classes.priceTitle}\n                      >\n                        <b>\n                          {Number(_nft.sellingPrice) > 0\n                            ? \"CHANGE PRICE\"\n                            : \"SELL\"}\n                        </b>\n                      </Typography>\n\n                      <TextField\n                        type=\"number\"\n                        value={_newSellingPrice}\n                        onChange={(event) =>\n                          setNewSellingPrice(event.target.value)\n                        }\n                        margin=\"dense\"\n                        label=\"Price (Ξ)\"\n                        placeholder=\"0.1\"\n                        disabled={_buyPriceRadio ? false : true}\n                      />\n\n                      <Typography\n                        variant=\"body1\"\n                        component=\"p\"\n                        color=\"textSecondary\"\n                      >\n                        {\"7% resale fee for the artist\"}\n                      </Typography>\n                    </Box>\n                  }\n                />\n\n                <FormControlLabel\n                  value=\"value2\"\n                  control={\n                    <Radio color=\"primary\" onClick={handleLicensePriceRadio} />\n                  }\n                  className={classes.formControlLabel}\n                  label={\n                    <Box className={classes.labelBox}>\n                      <Typography\n                        variant=\"body1\"\n                        component=\"h6\"\n                        className={classes.priceTitle}\n                      >\n                        <b>\n                          {Number(_nft.dailyLicensePrice) > 0\n                            ? \"UPDATE LICENSE FEE\"\n                            : \"MAKE LICENSABLE\"}\n                        </b>\n                      </Typography>\n\n                      <TextField\n                        type=\"number\"\n                        value={_newDailyLicensePrice}\n                        onChange={(event) =>\n                          setNewDailyLicensePrice(event.target.value)\n                        }\n                        margin=\"dense\"\n                        label=\"Daily Fee (Ξ)\"\n                        placeholder=\"0.1\"\n                        disabled={_licensePriceRadio ? false : true}\n                      />\n\n                      <Typography\n                        variant=\"body1\"\n                        component=\"p\"\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        {\"3% resale fee for the artist\"}\n                      </Typography>\n                    </Box>\n                  }\n                />\n              </RadioGroup>\n              <Button\n                variant=\"outlined\"\n                color=\"inherit\"\n                className={classes.button}\n                disabled={\n                  (!_buyPriceRadio && !_licensePriceRadio) ||\n                  (!_newSellingPrice && !_newDailyLicensePrice) ||\n                  (_buyPriceRadio &&\n                    Number(_newSellingPrice) <= 0 &&\n                    Number(_nft.sellingPrice) === 0) ||\n                  (Number(_nft.sellingPrice) > 0 &&\n                    Number(_newSellingPrice) < 0) ||\n                  (_licensePriceRadio &&\n                    Number(_newDailyLicensePrice) <= 0 &&\n                    Number(_nft.dailyLicensePrice) === 0) ||\n                  (Number(_nft.dailyLicensePrice) > 0 &&\n                    Number(_newDailyLicensePrice) < 0)\n                }\n                onClick={handlePriceUpdate}\n              >\n                {_buyPriceRadio &&\n                  Number(_nft.sellingPrice) > 0 &&\n                  Number(_newSellingPrice) === 0 &&\n                  \"REMOVE FROM SALE\"}\n                {_licensePriceRadio &&\n                  Number(_nft.dailyLicensePrice) > 0 &&\n                  Number(_newDailyLicensePrice) === 0 &&\n                  \"REMOVE FROM LICENSING\"}\n                {_buyPriceRadio &&\n                  Number(_nft.sellingPrice) === 0 &&\n                  Number(_newSellingPrice) > 0 &&\n                  \"PUT ON SALE\"}\n                {_licensePriceRadio &&\n                  Number(_nft.dailyLicensePrice) === 0 &&\n                  Number(_newDailyLicensePrice) > 0 &&\n                  \"PUT ON LICENSE\"}\n                {_buyPriceRadio &&\n                  Number(_nft.sellingPrice) > 0 &&\n                  Number(_newSellingPrice) > 0 &&\n                  \"CHANGE SALE PRICE\"}\n                {_licensePriceRadio &&\n                  Number(_nft.dailyLicensePrice) > 0 &&\n                  Number(_newDailyLicensePrice) > 0 &&\n                  \"CHANGE LICENSE PRICE\"}\n                {(!_buyPriceRadio && !_licensePriceRadio) ||\n                (_buyPriceRadio && Number(_newSellingPrice) <= 0) ||\n                (_licensePriceRadio && Number(_newDailyLicensePrice) <= 0)\n                  ? \"...\"\n                  : \"\"}\n              </Button>\n            </FormControl>\n          )}\n        </>\n      )}\n      {!_nft && (\n        <Box className={classes.emptyListBox}>\n          <Typography className={classes.emptyListText} variant=\"h4\">\n            {\"No NFT!\"}\n          </Typography>\n          <Typography className={classes.emptyListText} variant=\"subtitle1\">\n            {`Wrong identifier (${id})`}\n          </Typography>\n        </Box>\n      )}\n      <BackdropProgress open={_progress} />\n    </ScrollableContainer>\n  )\n}\n","import React from \"react\"\nimport {\n  Theme,\n  Typography,\n  Box,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Collapse,\n  IconButton,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Avatar\n} from \"@material-ui/core\"\nimport createStyles from \"@material-ui/core/styles/createStyles\"\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\nimport ProviderContext, {\n  DigitalArtContextType\n} from \"../context/DigitalArtContext\"\nimport { LicensePurchasedEvent, NFT } from \"../types/Blockchain\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport useBooleanCondition from \"../hooks/useBooleanCondition\"\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\"\nimport clsx from \"clsx\"\nimport NFTCardsContainer from \"../components/NFTCardsContainer\"\nimport cardStyles from \"../styles/cards\"\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\"\nimport BackdropProgress from \"../components/BackdropProgress\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    emptyListBox: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n      paddingBottom: theme.spacing(8),\n      height: \"80vh\"\n    },\n    emptyListText: {\n      color: theme.palette.text.hint\n    },\n    expand: {\n      transform: \"rotate(0deg)\",\n      marginLeft: \"auto\",\n      transition: theme.transitions.create(\"transform\", {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expandOpen: {\n      transform: \"rotate(180deg)\"\n    },\n    list: {\n      width: \"100%\",\n      maxWidth: \"90%\",\n      backgroundColor: theme.palette.background.paper,\n      padding: 0\n    },\n    inline: {\n      display: \"inline\"\n    },\n    expandedContent: {\n      display: \"flex\",\n      flex: 1,\n      flexDirection: \"column\"\n    },\n    valid: {\n      backgroundColor: \"green\"\n    },\n\n    invalid: {\n      backgroundColor: \"red\"\n    }\n  })\n)\n\nexport default function LicensesPage() {\n  // Material UI Theming.\n  const classes = useStyles()\n  const cardsStyles = cardStyles()\n\n  // License purchases events.\n  const [_licensePurchases, setLicensePurchases] = React.useState<\n    Map<number, Array<LicensePurchasedEvent>>\n  >(new Map<number, Array<LicensePurchasedEvent>>())\n\n  // Expandable card.\n  const [_expanded, setExpanded, unsetExpanded] = useBooleanCondition()\n\n  // Backdrop progress.\n  const [_progress = true, startProgress, stopProgress] = useBooleanCondition()\n\n  // Custom providers.\n  const providerContext = React.useContext(\n    ProviderContext\n  ) as DigitalArtContextType\n  const { _nfts, _signerAddress, getLicensePurchasedEventsForNFT } =\n    providerContext\n\n  // Get all licenses for the nfts for smart contract events.\n  React.useEffect(() => {\n    const getLicensePurchases = async () => {\n      let licensePurchases: Map<number, Array<LicensePurchasedEvent>> = new Map<\n        number,\n        Array<LicensePurchasedEvent>\n      >()\n\n      for (let i = 0; i < _nfts.length; i++) {\n        const licensesForNFT = await getLicensePurchasedEventsForNFT(\n          Number(_nfts[i].id)\n        )\n\n        const filteredLicenses = licensesForNFT.filter(\n          (licenseEvent: LicensePurchasedEvent) =>\n            licenseEvent.sender === _signerAddress\n        )\n\n        if (filteredLicenses.length > 0)\n          licensePurchases.set(Number(_nfts[i].id), filteredLicenses)\n      }\n\n      setLicensePurchases(licensePurchases)\n      stopProgress()\n    }\n\n    startProgress()\n    getLicensePurchases()\n  }, [_nfts])\n\n  return (\n    <NFTCardsContainer\n      pageTitle={\"LICENSES\"}\n      errorMessage={\"There are no NFTs where to buy licenses from!\"}\n      filteredNFTs={_nfts.length > 0 ? _nfts : []}\n    >\n      {_nfts &&\n      _nfts.filter((nft: NFT) => !!_licensePurchases.get(Number(nft.id)))\n        .length > 0 ? (\n        _nfts\n          .sort((a: NFT, b: NFT) => a.id - b.id)\n          .filter((nft: NFT) => !!_licensePurchases.get(Number(nft.id)))\n          .map((nft: NFT, i: number) => (\n            <>\n              {_licensePurchases.get(Number(nft.id)) ? (\n                <Box key={i} className={cardsStyles.cardsBox}>\n                  <Card className={cardsStyles.card}>\n                    <CardActionArea>\n                      <CardMedia\n                        component=\"img\"\n                        alt={nft.metadata.title}\n                        image={nft.metadata.image}\n                        title={nft.metadata.title}\n                        className={cardsStyles.cardImage}\n                      />\n                      <CardContent className={cardsStyles.cardContent}>\n                        <Box>\n                          <Typography variant=\"h5\" component=\"h2\">\n                            {nft.metadata.title}\n                          </Typography>\n                          <Typography\n                            variant=\"body1\"\n                            component=\"p\"\n                            gutterBottom\n                          >\n                            {nft.metadata.description}\n                          </Typography>\n                        </Box>\n                        <IconButton\n                          className={clsx(classes.expand, {\n                            [classes.expandOpen]: _expanded\n                          })}\n                          onClick={_expanded ? unsetExpanded : setExpanded}\n                          aria-expanded={_expanded}\n                          aria-label=\"show more\"\n                          disabled={\n                            !_licensePurchases.get(Number(nft.id))?.length\n                          }\n                        >\n                          <ExpandMoreIcon />\n                        </IconButton>\n\n                        <Collapse in={_expanded} timeout=\"auto\" unmountOnExit>\n                          <CardContent>\n                            <List className={classes.list}>\n                              {_licensePurchases.get(Number(nft.id)) &&\n                                [..._licensePurchases.get(Number(nft.id))!]\n                                  .sort(\n                                    (a: any, b: any) =>\n                                      b.timestamp - a.timestamp\n                                  )\n                                  .map((purchasedEvent: any, i: number) => (\n                                    <Box key={i}>\n                                      <ListItem alignItems=\"center\">\n                                        <ListItemAvatar>\n                                          <Avatar\n                                            className={\n                                              Number(\n                                                purchasedEvent.endDateInMillis\n                                              ) -\n                                                Number(\n                                                  purchasedEvent.timestamp\n                                                ) >\n                                              0\n                                                ? classes.valid\n                                                : classes.invalid\n                                            }\n                                          >\n                                            {Number(\n                                              purchasedEvent.endDateInMillis\n                                            ) -\n                                              Number(purchasedEvent.timestamp) >\n                                            0\n                                              ? (Number(\n                                                  purchasedEvent.endDateInMillis\n                                                ) -\n                                                  Number(\n                                                    purchasedEvent.timestamp\n                                                  )) /\n                                                86400000\n                                              : 0}\n                                          </Avatar>\n                                        </ListItemAvatar>\n\n                                        <ListItemText\n                                          style={{\n                                            minWidth: \"90%\",\n                                            marginLeft: \"16px\"\n                                          }}\n                                          primary={\n                                            <Box\n                                              style={{\n                                                display: \"flex\",\n                                                justifyContent: \"space-between\"\n                                              }}\n                                            >\n                                              <Typography\n                                                component=\"span\"\n                                                variant=\"h6\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                              >\n                                                {`License #${i + 1}`}\n                                              </Typography>\n                                              <a\n                                                href={`https://ropsten.etherscan.io/tx/${purchasedEvent.txHash}`}\n                                                target=\"blank\"\n                                                style={{\n                                                  alignItems: \"center\",\n                                                  display: \"flex\"\n                                                }}\n                                              >\n                                                <VerifiedUserIcon\n                                                  style={{\n                                                    color: \"green\",\n                                                    fontSize: \"1.2rem\"\n                                                  }}\n                                                />\n                                              </a>\n                                            </Box>\n                                          }\n                                          secondary={\n                                            <>\n                                              <Typography\n                                                component=\"span\"\n                                                variant=\"body1\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                              >\n                                                {`Price`}{\" \"}\n                                                <b style={{ color: \"green\" }}>\n                                                  {\" \"}\n                                                  {`${formatUnits(\n                                                    purchasedEvent.price\n                                                  )}`}{\" \"}\n                                                  Ξ\n                                                </b>\n                                                <br></br>\n                                              </Typography>\n                                              <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                                gutterBottom\n                                              >\n                                                {`Expiry ${new Date(\n                                                  Number(\n                                                    purchasedEvent.endDateInMillis\n                                                  )\n                                                ).toLocaleString()}`}\n                                                <br></br>\n                                              </Typography>\n                                              <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                              ></Typography>\n                                            </>\n                                          }\n                                        />\n                                        <Divider\n                                          variant=\"inset\"\n                                          style={{ backgroundColor: \"black\" }}\n                                        />\n                                      </ListItem>\n                                    </Box>\n                                  ))}\n                            </List>\n                          </CardContent>\n                        </Collapse>\n                      </CardContent>\n                    </CardActionArea>\n                  </Card>\n                </Box>\n              ) : (\n                <Box className={classes.emptyListBox}>\n                  <Typography className={classes.emptyListText} variant=\"h4\">\n                    No Licenses!\n                  </Typography>\n                  <Typography\n                    className={classes.emptyListText}\n                    variant=\"subtitle1\"\n                  >\n                    Buy your license from the market!\n                  </Typography>\n                </Box>\n              )}\n            </>\n          ))\n      ) : (\n        <Box className={classes.emptyListBox}>\n          <Typography className={classes.emptyListText} variant=\"h4\">\n            No Licenses!\n          </Typography>\n          <Typography className={classes.emptyListText} variant=\"subtitle1\">\n            There are no NFTs where to purchase a license from!\n          </Typography>\n        </Box>\n      )}\n      <BackdropProgress open={_progress} />\n    </NFTCardsContainer>\n  )\n}\n","import React from \"react\"\nimport {\n  AppBar,\n  Box,\n  createStyles,\n  IconButton,\n  makeStyles,\n  Paper,\n  Theme,\n  ThemeProvider,\n  Toolbar\n} from \"@material-ui/core\"\nimport EntryPage from \"./screens/Entry\"\nimport MarketPage from \"./screens/Market\"\nimport ThemeContextType from \"./context/ThemeContextType\"\nimport useThemeContext from \"./hooks/useThemeContext\"\nimport useProviderContext from \"./hooks/useDigitalArt\"\nimport Brightness7Icon from \"@material-ui/icons/Brightness7\"\nimport Brightness4Icon from \"@material-ui/icons/Brightness4\"\nimport BackdropProgress from \"./components/BackdropProgress\"\nimport {\n  Switch,\n  Route,\n  Redirect,\n  useLocation,\n  useHistory\n} from \"react-router-dom\"\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport ArrowBackRoundedIcon from \"@material-ui/icons/ArrowBackRounded\"\nimport Sidebar from \"./components/SidebarMenu\"\nimport ArtworksPage from \"./screens/Artworks\"\nimport MintNFTPage from \"./screens/MintNFT\"\nimport { Contract, Wallet, ethers } from \"ethers\"\nimport { abi } from \"./contracts/DigitalArt.json\"\nimport IPFS from \"ipfs-api\"\nimport { DigitalArt } from \"./types/DigitalArt\"\nimport DigitalArtContextType from \"./context/DigitalArtContext\"\nimport useBooleanCondition from \"./hooks/useBooleanCondition\"\nimport MarketableNFTPage from \"./screens/MarketableNFT\"\nimport CollectionPage from \"./screens/Collection\"\nimport PurchasedNFTPage from \"./screens/PurchasedNFT\"\nimport LicensesPage from \"./screens/Licenses\"\nimport detectEthereumProvider from \"@metamask/detect-provider\"\n\n// Custom styles.\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      minHeight: \"100vh\",\n      flex: 1\n    },\n    leftAppBarButton: {\n      marginRight: theme.spacing(2)\n    },\n    placeholder: {\n      flexGrow: 1\n    }\n  })\n)\n\n// Bootstrapping component which starts the Digital Art context instance which handles the blockchain communication.\nfunction App() {\n  // Material UI Theming.\n  const classes = useStyles()\n\n  // Handle the provider, smart contract, signer and ipfs endpoint istances.\n  const [_digitalArt, setDigitalArt] = React.useState<DigitalArt | undefined>(\n    undefined\n  )\n  // Sidebar menu.\n  const [_sidebar, openSidebar, closeSidebar] = useBooleanCondition()\n\n  // React router dom providers.\n  const location = useLocation()\n  const history = useHistory()\n\n  // Custom providers.\n  const themeContext = useThemeContext()\n  const { _theme, toggleTheme } = themeContext\n\n  const providerContext = useProviderContext(_digitalArt)\n  const signer = _digitalArt ? _digitalArt.signer : undefined\n\n  // Main logic for backward navigation through different pages.\n  const navigateBack = () => {\n    const numberRegex = /\\d/\n\n    // Back to Collection page.\n    if (\n      numberRegex.test(location.pathname) &&\n      location.pathname.includes(\"/collection/\")\n    ) {\n      history.replace(signer && signer._address ? \"/collection\" : \"/\")\n    }\n\n    // Back to License page.\n    if (\n      numberRegex.test(location.pathname) &&\n      location.pathname.includes(\"/licenses/\")\n    ) {\n      history.replace(signer && signer._address ? \"/licenses\" : \"/\")\n    }\n\n    // Back to Market page.\n    if (\n      location.pathname === \"/collection\" ||\n      location.pathname === \"/artworks\" ||\n      location.pathname === \"/licenses\" ||\n      location.pathname === \"/market/mint\" ||\n      (numberRegex.test(location.pathname) &&\n        location.pathname.includes(\"/market/\"))\n    ) {\n      history.replace(signer && signer._address ? \"/market\" : \"/\")\n    }\n  }\n\n  // Sends an explicit connection request from user to MetaMask.\n  const connectYourWallet = async () => {\n    if (_digitalArt) {\n      const { injectedProvider, provider } = _digitalArt\n\n      await injectedProvider.request({ method: \"eth_requestAccounts\" })\n\n      setDigitalArt({\n        ..._digitalArt,\n        signer: provider.getSigner((await provider.listAccounts())[0])\n      })\n    }\n  }\n\n  // Bootstrap the application w/ blockchain connection and related objects istantiation.\n  React.useEffect(() => {\n    const connectToBlockchain = async () => {\n      try {\n        // Let's check for the injected window.ethereum global object.\n        const ethereumInjectedProvider: any = await detectEthereumProvider()\n\n        // Check for MetaMask provider.\n        if (!ethereumInjectedProvider?.isMetaMask) {\n          throw Error(\"Do you have multiple wallets installed?\")\n        } else configureConnection(ethereumInjectedProvider)\n      } catch (error) {\n        throw error\n      }\n\n      /**\n       * Configure the connection to the blockchain using the Ethereum MetaMask injected provider.\n       * @param injectedProvider <any> - MetaMask Ethereum injected provider.\n       */\n      async function configureConnection(injectedProvider: any) {\n        // Request MetaMask account permission for DApp connection.\n        await injectedProvider.request({ method: \"eth_accounts\" })\n\n        // Wrapper for ethers provider.\n        const provider = new ethers.providers.Web3Provider(injectedProvider)\n\n        // Set current Signer.\n        const signer = provider.getSigner((await provider.listAccounts())[0])\n\n        const currentNetwork = await provider.getNetwork()\n\n        // Development.\n        if (currentNetwork.chainId === 31337) {\n          // State update.\n          setDigitalArt({\n            injectedProvider,\n            provider,\n            signer,\n            marketplaceSigner: new Wallet(\n              process.env.REACT_APP_DEV_MARKETPLACE_OWNER_PRIVATE_KEY!,\n              provider\n            ),\n            contract: new Contract(\n              process.env.REACT_APP_DEV_CONTRACT_ADDRESS!,\n              abi,\n              signer\n            ),\n            ipfs: new IPFS({\n              host: process.env.REACT_APP_DEV_IPFS_HOST!,\n              port: process.env.REACT_APP_DEV_IPFS_PORT!,\n              protocol: process.env.REACT_APP_DEV_IPFS_PROTOCOL!\n            })\n          })\n        }\n\n        // Test (Ropsten).\n        if (currentNetwork.chainId === 3) {\n          // State update.\n          setDigitalArt({\n            injectedProvider,\n            provider,\n            signer,\n            marketplaceSigner: new Wallet(\n              process.env.REACT_APP_TEST_MARKETPLACE_OWNER_PRIVATE_KEY!,\n              provider\n            ),\n            contract: new Contract(\n              process.env.REACT_APP_TEST_CONTRACT_ADDRESS!,\n              abi,\n              signer\n            ),\n            ipfs: new IPFS({\n              host: process.env.REACT_APP_TEST_CONTRACT_ADDRESS!,\n              port: process.env.REACT_APP_TEST_CONTRACT_ADDRESS!,\n              protocol: process.env.REACT_APP_TEST_CONTRACT_ADDRESS!\n            })\n          })\n        }\n\n        // TODO -> Prod TBD because for now we will use the testnet (Ropsten) only.\n      }\n    }\n\n    connectToBlockchain()\n  }, [])\n\n  // MetaMask event listener for account change.\n  _digitalArt?.injectedProvider.on(\n    \"accountsChanged\",\n    async (accounts: Array<string>) => {\n      // Current MetaMask account is located to 0 index.\n      if (_digitalArt && accounts[0] !== _digitalArt.signer._address) {\n        // Update current signer.\n        setDigitalArt({\n          ..._digitalArt,\n          signer: _digitalArt.provider.getSigner(accounts[0])\n        })\n      }\n    }\n  )\n\n  // MetaMask event listener for network change.\n  _digitalArt?.injectedProvider.on(\"chainChanged\", (id: string) => {\n    window.location.reload()\n  })\n\n  return (\n    <ThemeContextType.Provider value={themeContext}>\n      <ThemeProvider theme={_theme}>\n        <Paper className={classes.container} elevation={0} square={true}>\n          {signer !== undefined && (\n            <DigitalArtContextType.Provider value={providerContext}>\n              <Box className={classes.container}>\n                <AppBar color=\"inherit\" elevation={0} position=\"static\">\n                  <Toolbar>\n                    {location.pathname === \"/market\" ? (\n                      <>\n                        <IconButton\n                          edge=\"start\"\n                          className={classes.leftAppBarButton}\n                          onClick={openSidebar}\n                        >\n                          <MenuIcon />\n                        </IconButton>\n\n                        <Sidebar open={_sidebar} onClose={closeSidebar} />\n                      </>\n                    ) : location.pathname !== \"/\" ? (\n                      <>\n                        <IconButton\n                          edge=\"start\"\n                          className={classes.leftAppBarButton}\n                          onClick={navigateBack}\n                        >\n                          <ArrowBackRoundedIcon />\n                        </IconButton>\n                      </>\n                    ) : null}\n\n                    <div className={classes.placeholder} />\n\n                    <IconButton edge=\"end\" onClick={toggleTheme}>\n                      {_theme.palette.type !== \"dark\" ? (\n                        <Brightness4Icon />\n                      ) : (\n                        <Brightness7Icon />\n                      )}\n                    </IconButton>\n                  </Toolbar>\n                </AppBar>\n                <Switch>\n                  <Redirect exact from=\"/DigitalArt-dapp\" to=\"/\" />\n                  <Route path=\"/market/mint\">\n                    {signer._address ? (\n                      <MintNFTPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/collection/:id\">\n                    {signer._address ? (\n                      <PurchasedNFTPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/market/:id\">\n                    {signer._address ? (\n                      <MarketableNFTPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/licenses\">\n                    {signer._address ? (\n                      <LicensesPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/collection\">\n                    {signer._address ? (\n                      <CollectionPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/artworks\">\n                    {signer._address ? (\n                      <ArtworksPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/market\">\n                    {signer._address ? (\n                      <MarketPage />\n                    ) : (\n                      <Redirect to={{ pathname: \"/\" }} />\n                    )}\n                  </Route>\n                  <Route path=\"/\">\n                    {signer._address ? (\n                      <Redirect to={{ pathname: \"/market\" }} />\n                    ) : (\n                      <EntryPage connect={connectYourWallet} />\n                    )}\n                  </Route>\n                </Switch>\n              </Box>\n            </DigitalArtContextType.Provider>\n          )}\n          <EntryPage />\n        </Paper>\n\n        <BackdropProgress open={!signer} />\n      </ThemeProvider>\n    </ThemeContextType.Provider>\n  )\n}\n\nexport default App\n","import { createMuiTheme, PaletteType } from \"@material-ui/core\"\nimport React from \"react\"\nimport { ThemeContextType } from \"../context/ThemeContextType\"\n\n// Hook for handling the custom Material-UI Theme status.\nexport default function useThemeContext(): ThemeContextType {\n  const themeType = localStorage.getItem(\"theme-type\") as PaletteType\n  const [_themeType, setThemeType] = React.useState<PaletteType>(\n    themeType || \"light\"\n  )\n\n  const _theme = React.useMemo(() => {\n    return createMuiTheme({\n      palette: {\n        type: _themeType,\n        primary: {\n          main: _themeType === \"light\" ? \"#14110F\" : \"#F4F4F9\"\n        },\n        secondary: {\n          main: _themeType === \"light\" ? \"#2B50AA\" : \"#266DD3\"\n        },\n        background: {\n          paper: _themeType === \"light\" ? \"#F4F4F9\" : \"#34312D\"\n        }\n      }\n    })\n  }, [_themeType])\n\n  // Switches the type types and store the value.\n  function toggleTheme() {\n    const newThemeType = _themeType === \"dark\" ? \"light\" : \"dark\"\n\n    localStorage.setItem(\"theme-type\", newThemeType)\n    setThemeType(newThemeType)\n  }\n\n  return {\n    _theme,\n    toggleTheme\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\"\nimport \"./index.css\"\nimport { BrowserRouter } from \"react-router-dom\"\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register()\n","import { Contract } from \"ethers\"\nimport {\n  InfringmentAttemptsRecordedEvent,\n  LicensePurchasedEvent,\n  TokenPurchasedEvent\n} from \"../types/Blockchain\"\n\n/**\n * Retrieve every NFT from the smart contract events.\n * @returns Array<NFT> - Array containing the NFTs.\n */\nexport async function retrieveNfts(contract: Contract) {\n  // Filter to 'TokenMinted' smart contract event.\n  const filter = contract.filters.TokenMinted()\n  const tokenMintedEvents = await contract.queryFilter(filter)\n\n  const nfts: any[] = []\n  const last = tokenMintedEvents.length\n\n  for (\n    let i = tokenMintedEvents.length - 1;\n    i >= tokenMintedEvents.length - last;\n    i--\n  ) {\n    // Get event info.\n    const eventArgs = tokenMintedEvents[i].args as any\n\n    // Get token updated data.\n    const tokenData = await contract.idToNFT(eventArgs.tokenId)\n\n    // Get NFT IPFS metadata.\n    const response = await fetch(eventArgs.tokenURI)\n\n    // Push the NFT data.\n    const nft = {\n      id: eventArgs.tokenId,\n      sellingPrice: tokenData.sellingPrice,\n      dailyLicensePrice: tokenData.dailyLicensePrice,\n      uri: eventArgs.tokenURI,\n      artist: tokenData.artist,\n      owner: tokenData.owner,\n      metadata: { ...(await response.json()) }\n    }\n\n    nfts.push(nft)\n  }\n\n  return nfts\n}\n\n/**\n * Retrieve every Token Purchased event from the smart contract events.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @returns Array<TokenPurchasedEvent> - Array containing the data from the Token Purchased events.\n */\nexport async function retrieveTokenPurchasedEvent(contract: Contract) {\n  // Filter to 'TokenPurchased' smart contract event.\n  const filter = contract.filters.TokenPurchased()\n  const tokenPurchasedEvents = await contract.queryFilter(filter)\n\n  const purchases: TokenPurchasedEvent[] = []\n  const last = tokenPurchasedEvents.length\n\n  for (\n    let i = tokenPurchasedEvents.length - 1;\n    i >= tokenPurchasedEvents.length - last;\n    i--\n  ) {\n    // Get event info.\n    const purchase = tokenPurchasedEvents[i].args as any\n\n    // Push the data.\n    purchases.push({\n      ...purchase,\n      txHash: tokenPurchasedEvents[i].transactionHash\n    })\n  }\n\n  return purchases\n}\n\n/**\n * Retrieve every License Purchased event from the smart contract events.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @returns Array<LicensePurchasedEvent> - Array containing the data from the License Purchased events.\n */\nexport async function retrieveLicensePurchasedEvent(contract: Contract) {\n  // Filter to 'LicensePurchased' smart contract event.\n  const filter = contract.filters.LicensePurchased()\n  const licensePurchasedEvents = await contract.queryFilter(filter)\n\n  const purchases: LicensePurchasedEvent[] = []\n  const last = licensePurchasedEvents.length\n\n  for (\n    let i = licensePurchasedEvents.length - 1;\n    i >= licensePurchasedEvents.length - last;\n    i--\n  ) {\n    // Get event info.\n    const purchase = licensePurchasedEvents[i].args as any\n\n    // Push the data.\n    purchases.push({\n      ...purchase,\n      txHash: licensePurchasedEvents[i].transactionHash\n    })\n  }\n\n  return purchases\n}\n\n/**\n * Retrieve every Infringment Attempt Recorded event from the smart contract events.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @returns Array<InfringmentAttemptsRecordedEvent> - Array containing the data from the Infringment Attempts Recorded events.\n */\nexport async function retrieveInfringmentAttemptsRecordedEvent(\n  contract: Contract\n) {\n  // Filter to 'InfringmentAttemptsRecorded' smart contract event.\n  const filter = contract.filters.InfringmentAttemptsRecorded()\n  const infringmentAttemptsRecordedEvents = await contract.queryFilter(filter)\n\n  const infringmentAttempts: InfringmentAttemptsRecordedEvent[] = []\n  const last = infringmentAttemptsRecordedEvents.length\n\n  for (\n    let i = infringmentAttemptsRecordedEvents.length - 1;\n    i >= infringmentAttemptsRecordedEvents.length - last;\n    i--\n  ) {\n    // Get event info.\n    const attempts = infringmentAttemptsRecordedEvents[i].args as any\n\n    // Push the data.\n    infringmentAttempts.push({\n      ...attempts,\n      txHash: infringmentAttemptsRecordedEvents[i].transactionHash\n    })\n  }\n\n  return infringmentAttempts\n}\n","import { BigNumber, Contract } from \"ethers\"\nimport { NFT } from \"../types/Blockchain\"\n\n/**\n * Bind a listener to the DigitalArt smart contract NFT mint event.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @param listener <(NFT) => void> - A listener for NFT mint event (TokenMinted).\n * @returns\n */\nexport function onNFTMinted(\n  contract: Contract,\n  listener: (nft: NFT) => void\n): () => void {\n  /**\n   * Prepare a function for updating the state when a new NFT is minted.\n   * @param tokenId <BigNumber> - BigNumber representation of the NFT unique identifier.\n   * @param sellingPrice <BigNumber> - BigNumber representation of the NFT selling price.\n   * @param dailyLicensePrice <BigNumber> - BigNumber representation of the NFT daily license price.\n   * @param tokenURI <string> - The IPFS url where to retrieve NFT metadata.\n   * @param owner <string> - The address of the owner of the NFT.\n   */\n  const getNFT = async (\n    tokenId: BigNumber,\n    sellingPrice: BigNumber,\n    dailyLicensePrice: BigNumber,\n    tokenURI: string,\n    owner: string\n  ) => {\n    // Get metadata from IPFS uri.\n    const response = await fetch(tokenURI)\n\n    const nft = {\n      id: Number(tokenId),\n      sellingPrice: Number(sellingPrice),\n      dailyLicensePrice: Number(dailyLicensePrice),\n      uri: tokenURI,\n      owner,\n      artist: owner,\n      metadata: await response.json()\n    }\n\n    listener(nft)\n  }\n\n  // Set listener handler for TokenMinted event.\n  contract.on(\"TokenMinted\", getNFT)\n\n  // Event bind.\n  return contract.off.bind(contract, \"TokenMinted\", getNFT)\n}\n\n/**\n * Bind a listener to the DigitalArt smart contract NFT token purchased event.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @param listener <(BigNumber) => void> - A listener for NFT token purchased event (TokenPurchased).\n * @returns\n */\nexport function onNFTPurchased(\n  contract: Contract,\n  listener: (tokenId: BigNumber, newOwner: string) => void\n): () => void {\n  /**\n   * Prepare a function for updating the state when a NFT is purchased.\n   * @param tokenId <BigNumber> - BigNumber representation of the NFT unique identifier.\n   * @param oldOwner <string> - The address of the old owner of the NFT.\n   * @param newOwner <string> - The address of the new owner of the NFT.\n   * @param price <BigNumber> - BigNumber representation of the amount paid to buy the NFT.\n   * @param timestamp <BigNumber> - Date and time when the tx has been sent.\n   */\n  const getPurchasedTokenId = async (\n    tokenId: BigNumber,\n    oldOwner: string,\n    newOwner: string,\n    price: BigNumber,\n    timestamp: BigNumber\n  ) => {\n    listener(tokenId, newOwner)\n  }\n\n  // Set listener handler for TokenMinted event.\n  contract.on(\"TokenPurchased\", getPurchasedTokenId)\n\n  // Event bind.\n  return contract.off.bind(contract, \"TokenPurchased\", getPurchasedTokenId)\n}\n\n/**\n * Bind a listener to the DigitalArt smart contract NFT selling price updated event.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @param listener <(NFT) => void> - A listener for NFT selling price updated event (SellingPriceUpdated).\n * @returns\n */\nexport function onSellingPriceUpdated(\n  contract: Contract,\n  listener: (tokenId: BigNumber, newSellingPrice: BigNumber) => void\n): () => void {\n  /**\n   * Prepare a function for updating the state when there is a change in the NFT selling price.\n   * @param tokenId <BigNumber> - BigNumber representation of the NFT unique identifier.\n   * @param oldSellingPrice <BigNumber> - BigNumber representation of the NFT old selling price.\n   * @param newSellingPrice <BigNumber> - BigNumber representation of the NFT new selling price.\n   */\n  const getNewSellingPrice = async (\n    tokenId: BigNumber,\n    oldSellingPrice: BigNumber,\n    newSellingPrice: BigNumber\n  ) => {\n    listener(tokenId, newSellingPrice)\n  }\n\n  // Set listener handler for SellingPriceUpdated event.\n  contract.on(\"SellingPriceUpdated\", getNewSellingPrice)\n\n  // Event bind.\n  return contract.off.bind(contract, \"SellingPriceUpdated\", getNewSellingPrice)\n}\n\n/**\n * Bind a listener to the DigitalArt smart contract NFT daily license price updated event.\n * @param contract <Contract> - The DigitalArt smart contract istance.\n * @param listener <(NFT) => void> - A listener for NFT daily license price updated event (DailyLicensePriceUpdated).\n * @returns\n */\nexport function onDailyLicensePriceUpdated(\n  contract: Contract,\n  listener: (tokenId: BigNumber, newDailyLicensePrice: BigNumber) => void\n): () => void {\n  /**\n   * Prepare a function for updating the state when there is a change in the NFT daily license price.\n   * @param tokenId <BigNumber> - BigNumber representation of the NFT unique identifier.\n   * @param oldDailyLicensePrice <BigNumber> - BigNumber representation of the NFT old daily license price.\n   * @param newDailyLicensePrice <BigNumber> - BigNumber representation of the NFT new daily license price.\n   */\n  const getNewDailyLicensePrice = async (\n    tokenId: BigNumber,\n    oldDailyLicensePrice: BigNumber,\n    newDailyLicensePrice: BigNumber\n  ) => {\n    listener(tokenId, newDailyLicensePrice)\n  }\n\n  // Set listener handler for DailyLicensePriceUpdated event.\n  contract.on(\"DailyLicensePriceUpdated\", getNewDailyLicensePrice)\n\n  // Event bind.\n  return contract.off.bind(\n    contract,\n    \"DailyLicensePriceUpdated\",\n    getNewDailyLicensePrice\n  )\n}\n","import React from \"react\"\nimport { DigitalArtContextType } from \"../context/DigitalArtContext\"\nimport { DigitalArt } from \"../types/DigitalArt\"\nimport {\n  retrieveInfringmentAttemptsRecordedEvent,\n  retrieveLicensePurchasedEvent,\n  retrieveNfts,\n  retrieveTokenPurchasedEvent\n} from \"../utils/smartContract\"\nimport {\n  onDailyLicensePriceUpdated,\n  onNFTMinted,\n  onNFTPurchased,\n  onSellingPriceUpdated\n} from \"../utils/listeners\"\nimport {\n  SafeMintTxInputData,\n  NFT,\n  BuyNFTInputData,\n  BuyLicenseInputData,\n  UpdateSellingPriceInputData,\n  UpdateDailyLicensePriceInputData,\n  RecordIPRInfringmentAttemptsInputData\n} from \"../types/Blockchain\"\n\n// Hook for handling the custom Digital Art context istance.\nexport default function useDigitalArtContext(\n  digitalArt: DigitalArt | undefined\n): DigitalArtContextType {\n  // The address of the current tx signer.\n  const [_signerAddress, setSignerAddress] = React.useState<string>(\"\")\n  // All NFTs minted and recorded in the smart contract.\n  const [_nfts, setNfts] = React.useState<Array<NFT>>([])\n\n  React.useEffect(() => {\n    ;(async function () {\n      // Check if MetaMask is properly connected, so we get a Signer object for the current account.\n      if (digitalArt?.signer._address) {\n        // Update signer.\n        setSignerAddress(digitalArt.signer._address)\n\n        // Read data from smart contracts.\n        const nfts = await retrieveNfts(digitalArt.contract)\n\n        if (nfts.length > 0) {\n          // State update.\n          setNfts(nfts)\n        }\n      }\n    })()\n  }, [digitalArt?.signer._address])\n\n  // Set up a listener for NFT minted smart contract event.\n  React.useEffect(() => {\n    if (digitalArt) {\n      return onNFTMinted(digitalArt.contract, (nft) => {\n        setNfts(\n          _nfts.length === 0 ||\n            Number(nft.id) !== Number(_nfts[_nfts.length - 1].id)\n            ? [..._nfts, nft]\n            : [..._nfts]\n        )\n      })\n    }\n  }, [digitalArt?.signer._address, _nfts])\n\n  // Set up a listener for NFT purchased smart contract event.\n  React.useEffect(() => {\n    if (digitalArt) {\n      return onNFTPurchased(digitalArt.contract, (tokenId, newOwner) => {\n        setNfts(\n          _nfts.length === 0\n            ? [..._nfts]\n            : _nfts.map((nft) => {\n                if (Number(nft.id) === Number(tokenId)) {\n                  nft.sellingPrice = 0\n                  nft.dailyLicensePrice = 0\n                  nft.owner = newOwner\n                }\n                return nft\n              })\n        )\n      })\n    }\n  }, [digitalArt?.signer._address, _nfts])\n\n  // Set up a listener for NFT selling price updated smart contract event.\n  React.useEffect(() => {\n    if (digitalArt) {\n      return onSellingPriceUpdated(\n        digitalArt.contract,\n        (tokenId, newSellingPrice) => {\n          setNfts(\n            _nfts.length === 0\n              ? [..._nfts]\n              : _nfts.map((nft) => {\n                  if (Number(nft.id) === Number(tokenId))\n                    nft.sellingPrice = Number(newSellingPrice)\n\n                  return nft\n                })\n          )\n        }\n      )\n    }\n  }, [digitalArt?.signer._address, _nfts])\n\n  // Set up a listener for NFT daily license price updated smart contract event.\n  React.useEffect(() => {\n    if (digitalArt) {\n      return onDailyLicensePriceUpdated(\n        digitalArt.contract,\n        (tokenId, newDailyLicensePrice) => {\n          setNfts(\n            _nfts.length === 0\n              ? [..._nfts]\n              : _nfts.map((nft) => {\n                  if (Number(nft.id) === Number(tokenId))\n                    nft.dailyLicensePrice = Number(newDailyLicensePrice)\n\n                  return nft\n                })\n          )\n        }\n      )\n    }\n  }, [digitalArt?.signer._address, _nfts])\n\n  /**\n   * Upload the image to IPFS and sends a tx to mint the NFT.\n   * @param data <SafeMintTxInputData> - Necessary data to mint a NFT.\n   */\n  async function mintNFT(data: SafeMintTxInputData) {\n    if (digitalArt) {\n      // Upload image to IPFS.\n      const imageCID = await digitalArt.ipfs.add(Buffer.from(data.image))\n\n      // Upload NFT metadata to IPFS.\n      const doc = JSON.stringify({\n        title: data.title,\n        description: data.description,\n        creator: data.creator,\n        year: data.year,\n        image: `https://ipfs.io/ipfs/${imageCID[0].hash}`\n      })\n      const metadataCID = await digitalArt.ipfs.add(Buffer.from(doc))\n\n      // Send the tx.\n      const tx = await digitalArt.contract\n        .connect(digitalArt.signer)\n        .safeMint(\n          `https://ipfs.io/ipfs/${metadataCID[0].hash}`,\n          data.sellingPrice,\n          data.dailyLicensePrice\n        )\n\n      // Wait for tx confirmation.\n      await tx.wait()\n    }\n  }\n\n  /**\n   * Send a tx to buy the NFT.\n   * @param data <BuyNFTInputData> - Necessary data to buy a NFT.\n   */\n  async function buyNFT(data: BuyNFTInputData) {\n    if (digitalArt) {\n      // Send the tx.\n      const tx = await digitalArt.contract\n        .connect(digitalArt.signer)\n        .purchaseNFT(data.id, Date.now(), { value: data.txValue })\n\n      // Wait for tx confirmation.\n      await tx.wait()\n    }\n  }\n\n  /**\n   * Send a tx to buy a license of usage for a specific NFT.\n   * @param data <BuyLicenseInputData> - Necessary data to buy a license for a specific NFT.\n   */\n  async function buyLicense(data: BuyLicenseInputData) {\n    if (digitalArt) {\n      // Send the tx.\n      const tx = await digitalArt.contract\n        .connect(digitalArt.signer)\n        .purchaseLicense(data.id, data.days, Date.now(), {\n          value: data.txValue\n        })\n\n      // Wait for tx confirmation.\n      await tx.wait()\n    }\n  }\n\n  /**\n   * Send a tx to update the selling price for a specific NFT.\n   * @param data <UpdateSellingPriceInputData> - Necessary data to update the selling price for a specific NFT.\n   */\n  async function updateSellingPrice(data: UpdateSellingPriceInputData) {\n    if (digitalArt) {\n      // Send the tx.\n      const tx = await digitalArt.contract\n        .connect(digitalArt.signer)\n        .updateSellingPrice(data.tokenId, data.newSellingPrice)\n\n      // Wait for tx confirmation.\n      await tx.wait()\n    }\n  }\n\n  /**\n   * Send a tx to update the daily license price for a specific NFT.\n   * @param data <UpdateDailyLicensePriceInputData> - Necessary data to update the daily license price for a specific NFT.\n   */\n  async function updateDailyLicensePrice(\n    data: UpdateDailyLicensePriceInputData\n  ) {\n    if (digitalArt) {\n      // Send the tx.\n      const tx = await digitalArt.contract\n        .connect(digitalArt.signer)\n        .updateDailyLicensePrice(data.tokenId, data.newDailyLicensePrice)\n\n      // Wait for tx confirmation.\n      await tx.wait()\n    }\n  }\n\n  /**\n   * Send a tx to record the latest data about IPR infringment attempts for a specific NFT.\n   * @param data <UpdateDailyLicensePriceInputData> - Necessary data to update the daily license price for a specific NFT.\n   */\n  async function recordIPRInfringementAttempts(\n    data: RecordIPRInfringmentAttemptsInputData\n  ) {\n    if (digitalArt) {\n      // Send the tx.\n      const tx = await digitalArt.contract\n        .connect(digitalArt.marketplaceSigner)\n        .recordIPRInfringementAttempts(\n          data.tokenId,\n          data.timestamp,\n          data.totalAttempts,\n          data.infringmentAttemptsHash\n        )\n\n      // Wait for tx confirmation.\n      await tx.wait()\n    }\n  }\n\n  /**\n   * Return the 'TokenPurchased' smart contract events for a specific NFT.\n   * @param tokenId <number> - Unique identifier of the NFT.\n   */\n  async function getTokenPurchasedEventsForNFT(tokenId: number) {\n    if (digitalArt) {\n      // Get the TokenPurchased events.\n      const purchases = await retrieveTokenPurchasedEvent(digitalArt.contract)\n\n      // Filter for token id.\n      const nftPurchases = purchases.filter(\n        (purchase) => Number(purchase.tokenId) === tokenId\n      )\n\n      return nftPurchases\n    }\n  }\n\n  /**\n   * Return the 'LicensePurchased' smart contract events for a specific NFT.\n   * @param tokenId <number> - Unique identifier of the NFT.\n   */\n  async function getLicensePurchasedEventsForNFT(tokenId: number) {\n    if (digitalArt) {\n      // Get the LicensesPurchased events.\n      const purchases = await retrieveLicensePurchasedEvent(digitalArt.contract)\n\n      // Filter for token id.\n      const licensesPurchases = purchases.filter(\n        (purchase) => Number(purchase.tokenId) === tokenId\n      )\n\n      return licensesPurchases\n    }\n  }\n\n  /**\n   * Return the 'InfringmentAttemptsRecorded' smart contract events for a specific NFT.\n   * @param tokenId <number> - Unique identifier of the NFT.\n   */\n  async function getInfringmentAttemptsRecordedEventForNFT(tokenId: number) {\n    if (digitalArt) {\n      // Get the InfringmentAttemptsRecorded events.\n      const attempts = await retrieveInfringmentAttemptsRecordedEvent(\n        digitalArt.contract\n      )\n\n      // Filter for token id.\n      const infringmentAttempts = attempts.filter(\n        (attempt) => Number(attempt.tokenId) === tokenId\n      )\n\n      return infringmentAttempts\n    }\n  }\n\n  return {\n    _signerAddress,\n    _nfts,\n    mintNFT,\n    buyNFT,\n    buyLicense,\n    updateSellingPrice,\n    updateDailyLicensePrice,\n    recordIPRInfringementAttempts,\n    getTokenPurchasedEventsForNFT,\n    getLicensePurchasedEventsForNFT,\n    getInfringmentAttemptsRecordedEventForNFT\n  }\n}\n"],"sourceRoot":""}